#!/usr/bin/perl

# NOTE:  the above line must be changed to show the path to the
# Perl interpreter on your system!  Leave the #! as is, but
# the path may have to be changed if yours is different.
#########################################################################
# RemindMe v3.0.14							#
# Allows users to have reminders automatically mailed to them on a	#
# date they select.  Useful for reminders about final exams, deadlines	#
# for publications, gift-giving occasions, or pretty much anything.	#
# the program allows you to determine a date, whether you want to be	#
# reminded annually or just once, and how far in advance you'd like to	#
# be reminded of the event or occasion.  Users may also use a password	#
# to get a list of all their pending reminders.				#
#									#
#########################################################################
##### Licensing:                                                        #
#####                                                                   #
#####  This program may be used free of charge under the following      #
#####  conditions:                                                      #
#####                                                                   #
#####  1. All instructions and Copyright lines must remain unchanged.   #
#####                                                                   #
#####  2. All pages generated by the program must contain one of the    #
#####     following pieces of HTML code:                                #
#####                                                                   #
#####     <font size=-2>Powered by				
#####     <a href="http://www.tesol.net/scripts/">RemindMe v3.0.14</a>	
#####     </font>                       				
#####  OR:                                                              #
#####     <!-- RemindMe v3.0.14 Copyright 1997 Kristina Pfaff-Harris -->
#####     <!-- Get it at http://www.tesol.net/scripts/         -->      
#####                                                                   #
#####  3. You may not sell or distribute this program.  You may charge  #
#####     a reasonable fee for installing it for a client as long as    #
#####     you make it clear that you are not the author, and you are    #
#####     not selling the program to them: only charging for installing #
#####     it.                                                           #
#####                                                                   #
#####  4. You agree that this program is offered without warranty of    #
#####     any kind, including warranty of fitness for a particular      #
#####     purpose. You further agree that the author and all sites      #
#####     associated in any way with this program are not liable for    #
#####     any damage or loss incurred as a result of using this program.#
#####                                                                   #
#########################################################################
#####                                                                   #
##### IMPORTANT INSTRUCTIONS:                                           #
#####                                                                   #
##### In this program, I have put **CHANGE** in all the places where    #
##### you will need to modify the program to run on your server, so     #
##### that you can easily find all the places where changes are         #
##### necessary.  This program must be chmod 755 or 775 in order to     #
##### work, and the html  and configuration files must be chmod 644.    #
##### Note:  on some, systems, you'll have to either make the files     #
##### "allreminders", "optin.txt", "optout.txt", "temp_signup.txt",   	#
##### and "passfile.txt" world writeable (chmod 666) or you'll have     #
##### to make remindme.cgi run as you (chmod 4755).  Permissions    	#
##### are sometimes a bit tricky since there are so many different      #
##### operating systems and web servers. If you encounter problems,     #
##### please email me and I'll see what I can do!                       #
#####                                                                   #
##### In addition, if you are on a Unix/Linux based web server, it must #
##### have the "sendmail" program.  I think this may work with          #
##### "qmail-inject," but have no way to test it.
#####                                                                   #
#########################################################################
#									#
# Using the program:							#
#									#
# This program requires the files remindme.cgi,  optin.txt, optout.txt,	#
# temp_signup.txt, allreminders, and passfile.txt. Please see the file	#
# README.remindme for more instructions on how to set this up.		#
# 									#
# For auto-sending of reminders, the program also requires that you 	#
# have sendmail and cron available on your Unix server, or the "at" 	#
# command on NT. In addition, you must have the ability to set up "cron	#
# jobs" on your Unix server, or "at" jobs on your NT server.  If	#
# you do not, or if you don't know whether you do or not, ask your	#
# web hosting provider for instructions on how to set up a scheduled	#
# nightly task on your web server.  Please note that remindme.cron DOES	#
# NOT DO ANYTHING and it does NOT MATTER WHERE YOU PUT IT.  It is an	#
# example file only, intended to show you a possible example of what 	#
# a "cron" job might look like.  YOU MUST ask the technical support 	#
# people for YOUR website how to set up a regularly scheduled automatic	#
# task.  If your local technical support people cannot help you, I 	#
# suggest that you either find a web hosting service who will help you,	#
# send the reminders manually every day, or let RemindMe try to handle	#
# sending the reminders internally.					#
#									#
# I hope this program proves useful to you!  Please contact me  	#
# (http://tesol.net/scriptmail.html) for any bugs or feedback.		#
#########################################################################

#################################################################
#                                                               #
#      Begin section where you need to change things. Keep      #
#      going until you get the the place where it says          #
#      "** Do not change anything beyond this point! **".       #
#      Please read all the instructions carefully, and you      #
#      shouldn't have any problems. :)                          #
#                                                               #
#################################################################

#### IMPORTANT!  If you are having trouble setting this up, or
#### finding where your files are supposed to be, you can use
#### the following to get some information about what the script
#### is trying to do, and where it's trying to look for files.
#### If you're having trouble, **CHANGE** $debugging = 0; to
#### $debugging = 1; and try running the script again.
#### Don't forget to set $debugging = 0; when the script is up
#### and running!

$debugging = 0;

#### **CHANGE**
#### "cron" is the Unix/Linux automatic task scheduler.  If you would
#### like to use "cron" to automatically send reminders every day,
#### and IF you have access to cron on your website, then follow the
#### instructions in the README file to set up your cron job, and
#### set
####
#### $cron = "cron";
####
#### below. On NT, the scheduler is called "at". If you are able to
#### use an "at" job on your NT server to send the reminders
#### automatically, then follow the instructions in the README file
#### to set up your "at job" and set:
####
#### $cron = "at";
####
#### below. If you do NOT have access to the cron or at commands,
#### RemindMe can try and send reminders every time it is accessed.
#### This may slow down operation of the script if you have many
#### reminders, but you won't have to remember to send
#### the reminders manually once a day.  If you wish to try this, set
####
#### $cron = "remindme";
####
#### below. Otherwise, if you wish to send
#### the reminders manually every day, set
####
#### $cron = "manual";
####
#### below, and no reminders will be sent unless you manually send
#### them.

$cron = "manual";

# $send_skipped_reminders is whether or not to send reminders even if they're
# late. For example: let's say that someone had a daily reminder set to go out
# on the night of July 20. However, your server crashed right before it could
# send that reminder. Ordinarily, that reminder would just sit there, never get
# sent, AND never get updated to be sent again. This is true for any recurring
# reminder, since the dates are only updated to the next date if the reminder
# is sent. If you set $send_skipped_reminders = 1; then the program will send
# all reminders that should have been sent at any time before today in case
# some have been skipped. If you leave $send_skipped_reminders = 0; then the
# program will just ignore any skipped reminders forever.
#
# You should note that if you've been using RemindMe for a long time, and you
# have users with skipped reminders that have just been sitting there forever,
# these users will suddenly start getting those reminders again, and this may be
# confusing to them. On the other hand, this also prevents problems where a user's
# daily, weekly, or monthly reminders just stop coming because your server couldn't
# send out their reminder once. Use this option cautiously.

$send_skipped_reminders = 1;

# $cgi_url is the full web address (URL) of the remindme.cgi program
# on your server. This *must* begin with "http://" and should end
# with "remindme.cgi" or "remindme.pl" depending on what you have
# named the remindme program. **CHANGE** this to the full URL of
# the RemindMe program on your server. If you get "File not found"
# or "Error 404" when you click on one of the buttons in the
# RemindMe interface, it probably means that this setting is not
# correct. :-)

$cgi_url = "http://www.your.site/cgi-bin/remindme.cgi";

###################################################################
#                                                                 #
#                  Operating System Specific Stuff                #
#                      (Windows vs. Unix/Linux)                   #
#                                                                 #
###################################################################

# In this section, we're going to try to get some data that will
# help us run this script whether you're using Windows NT/95/98 as
# a web server, or a Unix/Linux-based web server.  Here, I feel
# it necessary to point out that Unix/Linux web servers tend to
# be much more flexible and robust (in my experience) than Windows
# ones.  However, if you're stuck with Windows, we'll try to get
# this working anyway. :)

# If your web server is Linux/Unix based, please **CHANGE**
# $opsys below to "unix" like this and go to the Unix/Linux Stuff
# Section below:
# $opsys = "unix";
# Otherwise, if it is a Windows-based platform, **CHANGE** $opsys to "win"
# like this and go to the Windows Stuff section:
# $opsys = "win";

$opsys = "unix";

# $mail_method determines whether or not you want to use sendmail
# or pure "socket" connections to send mail. In general, if you
# are running under a Unix-based system, and have set $opsys = "unix";
# above, then you can go ahead and set $mail_method = "sendmail";
# If you're using a Windows system, and have set $opsys = "win";
# you MUST use $mail_method = "socket"; (In fact, if you have set
# $opsys = "win"; then the script will ignore what you put here and
# use socket-based mail regardless.) The only reason this is here
# is because there are times that people running under "unix" may
# want to try using socket-based mail. This gives them the opportunity
# to do so.

$mail_method = "sendmail";

###################################################################
#                                                                 #
#                   Mail with sendmail Stuff                      #
#                                                                 #
# If you have set $mail_method = "sendmail"; above, you will need #
# to fill out the path to sendmail here.                          #
#                                                                 #
###################################################################
# $path_to_sendmail needs to be the FULL path to sendmail on your
# server, and the name of the sendmail file itself:  You will
# probably be able to use what I have below, but sendmail
# is sometimes located in /usr/ucblib instead of /usr/lib and
# may be somewhere else altogether.  Ask your systems administrator
# where sendmail is, just to make sure, then **CHANGE** this to
# the correct path.  Note: on some systems, this is something
# totally different without the word "sendmail" at all such as
# "/var/qmail/bin/qmail-inject".

$path_to_sendmail = "/usr/sbin/sendmail";

###################################################################
#                                                                 #
#                     Mail with socket Stuff			  #
#                                                                 #
# If you have set $mail_method = "socket"; above, OR if you have  #
# set $opsys = "win";, you will need to fill out this section.    #
#                                                                 #
###################################################################

# $mail_server_hostname needs to be the hostname of a mail server
# that your web server is allowed to send mail through. Generally,
# this will be something like "mail.yourdomain.com" but it may
# be something completely different, and you may not be able to
# use this at all.  If your web server is also a mail server,
# you may be able to use "localhost" (yes, just that one word,
# no ".com" or anything -- it's a special word that means "this
# machine.")  You will need to ask your local technical support
# people for your website what hostname to use for your outgoing
# mail server, then **CHANGE** this to reflect that. For example:
# $mail_server_hostname = "mail.yourdomain.com";

$mail_server_hostname = "mail.your_domain.com";

# $this_server_hostname needs to be the hostname of your web
# server where this script will be run.  Sometimes, just the
# "www.yourdomain.com" will work, and sometimes your web
# server has its own name like "web-01.nt.somedomain.com".
# Again, you will need to get the hostname of this machine
# from the technical support people for your web server,
# and **CHANGE** this to reflect what they say. For example:
# $this_server_hostname = "www.yourdomain.com";

$this_server_hostname = "localhost";

# IMPORTANT: DO NOT CHANGE $smtp_auth UNLESS YOU KNOW THAT YOU NEED
# TO USE IT. Please look for "SMTP auth" in the FAQ if you have
# questions (http://tesol.net/scripts/FAQ/)

# Okay, you may NOT need these. If you're sending mail okay, then don't
# change the next two things. However, if you're having problems with
# your mail server requiring authentication to send mail, you may try
# one of these EXPERIMENTAL authentication thingies.
# $smtp_auth is what kind of authentication you want to try to push
# the mail past the mail server.
# $smtp_auth = "POP"; is for "POP before SMTP"
# $smtp_auth = "SMTP"; is for "PLAIN SMTP auth"
# $smtp_auth = "NONE"; is normal.

$smtp_auth = "NONE";

# If you are using POP or SMTP auth above, you must put the username
# and password of an email account located on the mail server you
# put in $mail_server_hostname here.
# NOTE: If there are any ", $, or @ signs in your username or password,
# you must put a \ (backslash) in front of them. For example, if your
# password is 1$jk"yn@, you would put:
# $pop_pw = "1\$jk\"yn\@";
# **CHANGE** "your email login" below to your email username on the
# mail server you'll be using.
# **CHANGE** "your email password" below to your email password on the
# mail server you'll be using.
# With POP before SMTP authentication, the program will login with this
# username and password. It won't check mail or anything: it will just
# log in. The mail server will then take note of the fact that an
# authorized user is on the address of your web server, and allow it to
# send mail. At least, this is the theory. :-)
# With SMTP authentication, the program will log directly into the
# outgoing mail server with this login and password.

$pop_un = "your email login";
$pop_pw = "your email password";

# If you are using POP or SMTP auth above, you may need to also
# specify your email address on that mail server. I know, for example,
# that if you have email at softhome.net, you will HAVE to use your
# softhome.net email address even if you have used the authentication
# above. **CHANGE** this to your actual email address if you have
# chosen POP or SMTP auth above.

$auth_from_address = "webmaster\@your_domain.com";

###################################################################
#                                                                 #
#  End of mail sending configuration stuff. On to more changes:   #
#                                                                 #
###################################################################

###################################################################
#                                                                 #
#            Various Email Preferences for this Program           #
# (You need this regardless of whether you have "win" or "unix".) #
#                                                                 #
###################################################################

# $opt_in_preferences:  Spam, or unsolicited email, has become a
# serious problem on the Internet.  Many hosting providers will terminate
# your account immediately if you are even suspected of sending Spam.
# Various U.S. states allow fines, civil penalties, and other legal
# actions to be taken against senders of junk email. This setting will
# help you make sure that only people who really want get reminders
# can sign up. Read the below instructions, and **CHANGE** this
# appropriately if necessary.
#
# opt in:  People will have to sign up, receive a special token
#          via email, and confirm their signup if they wish to get
#          reminders.  Note: Use of this feature is recommended.  If
#          you use this feature, and honestly abide by it, then you will
#          be able to prove that you are mailing responsibly. To use this,
#          set:
#
#          $opt_in_preferences = "opt in";
#
# opt out: Anyone can signup for reminders, but any email
#          they receive will allow them to opt-out or unsubscribe at
#          that time. Note that this will allow irresponsible people
#          to abuse this service by signing other people up, and could
#          cause trouble for you if your provider has a "No Tolerance"
#          policy on spam. To use this, set:
#
#          $opt_in_preferences = "opt out";
#

$opt_in_preferences = "opt in";

###################################################################
#                                                                 #
#            Locations of your configuration files                #
# (You need this regardless of whether you have "win" or "unix".) #
# In this section, we'll need to tell the program where it can    #
# find various files on your web server.                          #
#                                                                 #
###################################################################

# **CHANGE**
# $opt_out_file is the path to the file where you want to keep track
# of people who have opted NOT to ever receive email from this service.
# Change this to the full path of your "optout.txt" file. This file
# must be writeable by the web server.  Note: this is a "system"
# path and not a web address, thus, it must begin with a "/" (on unix-
# type systems) or "c:/" on Windows-type systems.

$opt_out_file = "/path/to/your/remindme/optout.txt";

# **CHANGE**
# $opt_in_file is the name of the file where you want to keep track
# of people who have opted back in.  I suggest you keep this
# indefinitely, in case someone accuses you of spamming them. :)
# Change this to the full path of your "optin.txt" file. This file
# must be writeable by the web server.  Note: this is a "system"
# path and not a web address, thus, it must begin with a "/" (on unix-
# type systems) or "c:/" on Windows-type systems.

$opt_in_file = "/path/to/your/remindme/optin.txt";

# **CHANGE**
# $temp_signup_file  is the full system path to your temporary
# signup file for users who "opt in" for your reminder service
# If you have "$opt_in_preferences = "opt in";" set, RemindMe
# will need a temporary file to store a special "token" that it will
# email to people when they try to sign up.  When the user receives the
# email with their token, and clicks on the link, RemindMe will check in
# this file to make sure the token really matches what we sent them.

$temp_signup_file = "/path/to/your/remindme/temp_signup.txt";

# $password_file is the complete path and filename of "passfile.txt".
# **CHANGE** "passfile.txt" to the path and filename on your server.
# This is a "system path" like "$opt_in_file" and "$opt_out_file" above,
# so set it up the same way.

$password_file = "/path/to/your/remindme/passfile.txt";

# **CHANGE**
# $mail_footer_file is a text file containing any message that you
# would like to have appended to messages sent by the reminder
# service.  This should be the full system path to where you
# have the file remindme_footer on your server.  You can edit
# this file with a standard text editor, or use the
# maintainreminder.html page to change the text.The path should
# be in the same format as for "allreminders" above.

$mail_footer_file = "/path/to/your/remindme/footer";

# **CHANGE**
# $allentries is the name of the file where you want to keep track of
# all the reminders.  You must change this to the location of the
# allreminders file on your server. This is a *system* path and
# NOT a URL, thus # it must start with / and must NOT start with http://
# For example:  /home/users/yourname/cgi-bin/allreminders.txt on Unix or
# c:/path/to/your/files/allreminders.txt on Windows

$allentries = "/path/to/your/remindme/allreminders.txt";

# $temp_reminders is the full system path to a temporary reminders
# file.  When a new user signs up for a reminder, and you have 'opt-in'
# set, the user's reminder will be stored in this file temporarily
# until they confirm their subscription.  This must be a full
# system path as with $allentries and other files above, and the
# file should be chmod 766.

$temp_reminders = "/path/to/your/remindme/temp_reminders.txt";

# $users_file is the full system path to where you want to keep
# track of your users and their passwords. When a user's last
# reminder is deleted, the user's username and password will be
# stored in this file so that they can sign up for more reminders
# without going through the whole signup process again. This
# must be a full system path as with $allentries and other files
# above, and the file should be chmod 766.

$users_file = "/path/to/your/remindme/users_file.txt";

###################################################################
#                                                                 #
#      Text and Page Display Preferences for this Program         #
# (You need this regardless of whether you have "win" or "unix".) #
# These are options for the name of your service, text to send if #
# someone signs up, any HTML you would like to use for when the   #
# program displays pages (so you can match the look of your site) #
# and so forth.)                                                  #
#                                                                 #
###################################################################

# **CHANGE**
# $header is the HTML header for any pages generated by the program.
# You may put any HTML you like in between the "header starts below
# this line" and "header ends above this line" remarks, but if
# you have any of the following characters: " @ % $ they must
# have a backslash \ in front of them.  For example:
# <a href=\"index.html\"> or kristina\@tesol.net

$header = qq[

<!-- header starts below this line -->

<HTML><HEAD><TITLE>RemindMe v3.0.14</TITLE></HEAD>
<body bgcolor=#ccffff>
<A HREF=http://www.tesol.net/scripts/index.html><img
src=remindme2.jpg 
border=0 alt=\"RemindMe\"></A><BR><BR><BR>
<table cellpadding=0 border=0 cellspacing=0 width=500> <tr> <td>
<img src=dot.gif height=1 width=41 border=0><BR></td>
<td bgcolor=#ff0000 width=1>
<img src=dot.gif height=75 width=1 border=0><BR></td>
<td bgcolor=#ccffff width=10>
<img src=dot.gif height=75 width=10 border=0><BR></td><td>

<!-- header ends above this line -->

];

#**CHANGE**
# $footer is like $header above in that you can have any HTML
# you want, but must backslash the characters " @ % or $.
# This is the HTML that will appear at the bottom of each page
# generated by the program.

$footer = qq[

<!-- footer starts below this line -->

<P><center>
</center> </td> </tr> </table> <BR><BR><BR> </BODY> </HTML>

<!-- footer ends above this line -->

];

# **CHANGE**
# $reminder_page_text is just whatever text you'd like to be displayed
# at the top of the RemindMe signup form.  You can make this anything
# you like, and even include HTML, But remember: any " @ % or $ characters
# must be backslashed, as in $header and $footer above.

$reminder_page_text = qq[

<!-- reminder text starts below this line -->

Welcome to RemindMe version 3.0.14.  You may set up a reminder right away,
or just list any reminders you have pending.  Reminders are sent by email
once per day, and recurring reminders will be sent as often as you
specify.

<!-- reminder text ends above this line -->

];

# **CHANGE**
# $confirm_reminder_message is a sort of pseudo-reminder sent out to users
# when they sign up. It is automatically sent the day after they've signed
# up and is set to Once Only. This is just some message text that should
# be emailed with the reminder, and should be short and simple. Change this
# as you like, but make sure that you may attention to the other instructions
# for changing text as regards " @ and other special characters. You may
# change any text starting with "Thank you for signing up..." below.
# Note the use of "$cgi_url". If you leave that as-is, it will put in
# whatever you have set at $cgi_url above.
#
# IMPORTANT: Do NOT use HTML in this text. Use only plain text.
# You have been warned. :-)

$confirm_reminder_message = qq[

Thank you for signing up for our email reminder service. This is a one-time
message to confirm that your account has been set up and is functioning. This
note is emailed as a reminder to everyone when they first sign up as a 
confirmation that the system is ready to accept reminders. We hope you
enjoy the reminder service! You may log into your account here:

 $cgi_url?FA=Login

];    # <-- Do not change this line

# **CHANGE**
# $owner_name is the name that you want to use for your reminder service.
# It can be pretty much anything, but any " @ $ or % must be backslashed
# as in $header and $footer above.

$owner_name = "RemindMe v3.0.14";

# **CHANGE**
# $owner_email should be the email address of a real person whom
# reminder recipients can contact for bug reports or other information.
# Change this to your own email address.  Note that the @ sign in the
# email address must have a backslash in front of it.

$owner_email = "you\@your_domain.com";

# **CHANGE**
# $reminder_subject is what you want the subject of the reminder
# mail messages to be.  You may change this to just about anything
# bearing in mind that it will be the subject of a mail message
# and thus, should not be too long.

$reminder_subject = "Just a Reminder ...";

# **CHANGE**
# $mail_header will appear at the top of each mail message sent
# by the reminder service.  You may put whatever text you like
# in between the =-=-=-=-=-=- lines, but you must backslash
# @ % " and $ as in $header and $footer.  The default value simply
# uses what you entered for "$owner_name" and prints "This
# reminder is brought to you by $owner_name".

$mail_header = qq[
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
This reminder is brought to you by $owner_name.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
];

###############################################################
#                                                             #
#           Congratulations!  You're all done!                #
#                                                             #
#       ** Do not change anything beyond this point! **       #
#      You should NOT have to change anything beyond this     #
#      point.  You can read through the code, though, if      #
#      that sort of thing interests you. :)                   #
#                                                             #
###############################################################
########################################################################
#####								   #####
#####    Don't change anything beyond this point.                  #####
#####								   #####
########################################################################
#
%data = &get_data();

# Debugging starts here...
# Some servers use software ID as Server Name. This will almost
# always be a host of some kind. :)

eval("use Time::Local;");
if ($@) {
    print &ct;
    print "$header
	  Sorry, but this program requires Perl version 5 (Your version
	  of Perl is $]) with the Time::Local module.  Perl version 5 and
	  above comes with the Time::Local module, but your system does 
	  not appear to have the Time::Local module installed.  Please 
	  ask the technical support people or administrators of your 
	  website to install the Time::Local module, or you will not 
	  be able to use this program.
	  $footer";
    exit();
}

# If you remove this link, without replacing it with a similar
# HTML comment (as above in the License section) you are in violation
# of the license for this program and various copyright laws.
# Yes, I realize that some people will remove it anyway: this is just
# to make sure that people know what they're doing is wrong. :-)
# And honestly, since you didn't have to pay for this, is the link
# really too much to ask? :-)

$footer = "<br><font size=1><a href=http://tesol.net/scripts>Powered
	   by RemindMe v3.0.14</a></font>
           <br>$footer";

$fatal_error = "";
&debug(
    "*** IMPORTANT *** IMPORTANT *** IMPORTANT ***<br><br> \$debugging is set to 1. When this script is set up and working, set \$debugging = 0; in remindme.cgi and you will no longer see these messages.<br>"
);
eval("use Cwd;");
unless ($@) {
    $pwd = cwd();
    &debug("I think the working directory is $pwd.");
}
&debug("\$path_to_sendmail is $path_to_sendmail.");
&debug("\$allentries is $allentries.");
if ( -f $allentries ) { &debug("$allentries exists. Good."); }
else { &debug("Cannot find $allentries (user database file)"); }
unless ( -w $allentries ) {
    $fatal_error .= "I cannot write to the reminders file \$allentries 
	($allentries). Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -w $opt_in_file ) {
    $fatal_error .= "I cannot write to the opt in file \$opt_in_file 
	($opt_in_file). Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -w $opt_out_file ) {
    $fatal_error .= "I cannot write to the opt out file \$opt_out_file 
	($opt_out_file). Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -w $temp_signup_file ) {
    $fatal_error
        .= "I cannot write to the temporary signup file \$temp_signup_file 
	($temp_signup_file).  Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -w $temp_reminders ) {
    $fatal_error
        .= "I cannot write to the temporary reminders file \$temp_reminders 
	($temp_reminders). Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -w $users_file ) {
    $fatal_error .= "I cannot write to the users file \$users_file 
	($users_file). Please make sure the file is writeable (try chmod 766).<br>";
}
unless ( -f $password_file ) {
    $fatal_error .= "I cannot read the password file \$password_file 
	($password_file). Please make sure the file is readable and writeable (try chmod 766).<br>";
}
unless ( -w $password_file ) {
    $fatal_error .= "I cannot write to the password file \$password_file 
	($password_file). Please make sure the file is writeable (try chmod 766).<br>";
}
if ( $opsys eq "unix" && $mail_method ne "socket" ) {
    unless ( -x $path_to_sendmail ) {
        $fatal_error .= "I cannot use the sendmail program you put in 
		\$path_to_sendmail ($path_to_sendmail).  Please make sure 
		it exists, and that 
		you are allowed to use it to send mail. If you have put
        	\"- t\" in there, please take it out. We only need the path 
		to the program file.<br>";
    }
}
if ( $fatal_error ne "" ) {
    print &ct;
    print "$header
		<b>Error! Program not correctly configured!</b><br><br>
		I encountered the following errors when trying to run. 
		Please correct
		these problems, or the program will not be able to run:
		<br><br>
		$fatal_error
		<br><br>
		More info that may be useful:<br><br>
		Operating system: $^O \$opsys: $opsys<br>";
    print "Working directory: $pwd <br>\n" if $pwd;
    print "Server Software: $ENV{'SERVER_SOFTWARE'} <br>\n"
        if $ENV{'SERVER_SOFTWARE'};
    print "Path Translated: $ENV{'PATH_TRANSLATED'} <br>\n"
        if $ENV{'PATH_TRANSLATED'};
    print "Server Name: $ENV{'SERVER_NAME'} <br>\n" if $ENV{'SERVER_NAME'};
    print "Script Name: $ENV{'SCRIPT_NAME'} <br>\n" if $ENV{'SCRIPT_NAME'};
    print "Script Filename: $ENV{'SCRIPT_FILENAME'} <br>\n"
        if $ENV{'SCRIPT_FILENAME'};
    print "Document Root: $ENV{'DOCUMENT_ROOT'} <br>\n"
        if $ENV{'DOCUMENT_ROOT'};
    print "Request URI: $ENV{'REQUEST_URI'} <br>\n" if $ENV{'REQUEST_URI'};
    print "<br>If you don't know what these errors mean, or how to 
		correct them, or what the information above is all about,
		please <a href=\"http://tesol.net/scripts/FAQ/\">check the FAQ</a>
		or, if you can't find the answer there, please 
		<a href=\"http://tesol.net/scriptmail.html\">contact the 
		author</a>
		and let me know what the errors are and where you've set up the
		script.
		$footer";
    exit();
}
&debug(
    "\$cgi_url is <a href=$cgi_url>$cgi_url</a>. If you click on this
	link, and it doesn't work, then you've set \$cgi_url incorrectly and
	will need to fix it in the script."
      );
&debug("\$mail_footer_file is $mail_footer_file.");
if ( -f $mail_footer_file ) { &debug("$mail_footer_file exists. Good."); }
else {
    &debug(
        "Cannot find $mail_footer_file (file to tack on the end of 
 mail messages)" );
}
&debug("\$password_file is $password_file.");
if ( -f $password_file ) { &debug("$password_file exists. Good."); }
else { &debug("Cannot find $password_file (password file)"); }

# $cron = cron is the same as $cron = at, and really
# just means that we're expecting RemindMe to send the
# reminders after being called by some outside entity.
if ( $cron eq "at" ) { $cron = "cron"; }

# Send the reminders every time if we don't have cron
# and we don't want to do it manually.
if ( $cron eq "remindme" ) { &send_reminders; }

$form_day   = $data{'Day'};
$form_month = $data{'Month'};

if ( $data{'Year'} eq "Not Selected" ) {
    $form_year = ( localtime(time) )[5] + 1900;
}

else { $form_year = $data{'Year'}; }

%months = ( 'Jan', 0, 'Feb', 1, 'Mar', 2,  'Apr', 3,
            'May', 4, 'Jun', 5, 'Jul', 6,  'Aug', 7,
            'Sep', 8, 'Oct', 9, 'Nov', 10, 'Dec', 11
          );

@howoften = ( 'Once Only',  'Annually', 'Semi-Annually', 'Quarterly',
              'Bi-Monthly', 'Monthly',  'Bi-Weekly',     'Weekly',
              'Daily'
            );

$email = $data{'Email'};
$email =~ s/\s+//sg;
$password    = $data{'Password'};
$password2   = $data{'Password2'};
$sendme      = $data{'Sendme'};
$remindme    = $data{'Remindme'};
$message     = $data{'Message'};
$filemessage = $message;
$filemessage =~ s/\r\n/\n/g;
$filemessage =~ s/\r/\n/g;
$filemessage =~ s/\n+$//sg;
$filemessage =~ s/\n/NEWLINE/g;

if ( $data{'Formaction'} eq "Add" ) {
    $tstmsg  = $data{'Message'};
    $tstmsg2 = $confirm_reminder_message;
    $tstmsg  =~ s/\s+//sg;
    $tstmsg2 =~ s/\s+//sg;
    if ( $tstmsg eq $tstmsg2
         && (    $data{'Email'} eq ""
              || $data{'Password'}  eq ""
              || $data{'Password2'} eq "" )
       )
    {
        print &ct;
        &show_register_screen;
        exit();
    }

    &check_password;
    &check_for_required_fields;
    &check_for_opt_out;
    &convert_date("Added");
}
elsif ( $data{'Formaction'} eq "List" ) {
    print &ct;
    &check_password;
    &list_reminders;
}
elsif ( $data{'Formaction'} eq "Edit" ) {
    print &ct;
    &check_password;
    &edit_reminder;
}
elsif ( $data{'Formaction'} eq "Delete" ) {
    print &ct;
    &check_password;
    &delete_reminder;
}
elsif ( $data{'Formaction'} eq "Mailpassword" ) {
    print &ct;
    &mail_password;
}
elsif (    $ARGV[0] eq "send_reminders"
        || $ENV{'QUERY_STRING'} eq "send-reminders" )
{
    if ( $cron eq "remindme" ) {

        # if $cron = "remindme" then we already ran
        # send_reminders, so just bail out. :)
        exit();
    }
    &send_reminders;
}
elsif ( $data{'Formaction'} eq "Edit_mail_footer" ) {
    print &ct;
    &edit_mail_footer;
}
elsif ( $data{'Formaction'} eq "Change_password" ) {
    print &ct;
    &change_password;
}
elsif ( $data{'Formaction'} eq "Opt In"
        || ( $data{'FA'} eq "oi" ) )
{

    #&& $data{'tk'} ne "" &&
    # $data{'em'} ne "")){

    print &ct;
    &opt_in;
}
elsif ( $data{'FA'} eq "oo" ) {

    #$data{'em'} ne "" && $data{'pw'} ne ""){
    print &ct;
    &opt_out;
}
elsif ( $ENV{'QUERY_STRING'} eq "admin" ) {
    print &ct;
    &admin_login;
}
elsif ( $data{'FA'} eq "Admin Menu" ) {
    print &ct;
    &password_check;
    &manage;
}
elsif ( $data{'FA'} eq "Register" ) {
    print &ct;
    &show_register_screen;
    exit();
}
elsif ( $data{'FA'} eq "Login" ) {
    print &ct;
    &show_login_screen;
    exit();
}
elsif ( $data{'Formaction'} eq "ShowAddScreen" ) {
    print &ct;
    &check_password;
    &show_main_screen;
    exit();
}

else {
    print &ct;
    &show_login_screen;
    exit();
}

sub check_for_required_fields {

    if (    $email eq ""
         || $password   eq ""
         || $sendme     eq ""
         || $form_day   eq ""
         || $form_month eq ""
         || $form_year  eq ""
         || $remindme   eq ""
         || $message    eq "" )
    {
        if ( $password ne "" ) {
            $password = "Entered: Not printed for security reasons.";
        }
        print &ct;
        print "$header <center><strong>Error: Insufficient Data</strong>
	</center><P>I'm sorry, but you left something out of one of the
	following fields:<br><br>
	<dl>
	<dd>Email address: $email
	<dd>Password: $password<dd>How often to send: $sendme
	<dd>Day: $form_day<dd>Month: $form_month
	<dd>How far in advance: $remindme<dd>Message for yourself:<br>
	$message</dl><br>
	Please <a onClick=\"javascript:history.back();\"
	href=$ENV{'HTTP_REFERER'}>go back to the form</a>
	and fill out all fields.$footer";
        exit();
    }
    if (    $email !~ /(.{1,})(\@)(.{1,})(\.)(.{2,})/
         || $email =~ /,/
         || $email =~ /.*\@.*\@/
         || $email =~ /\@\@/
         || $email =~ /\s/
         || $email =~ /\.$/
         || $email =~ /\@\./
         || $email =~ /\s+/ )
    {
        print &ct;
        print "$header <center><strong>Error: Incorrect Email</strong>
	</center><P>I'm sorry, but the email address you entered
        ($email) appears to be incorrect. Email addresses must contain
	an \@ sign, and cannot contain spaces or commas. 
	Please <a onClick=\"javascript:history.back();\"
	href=\"$cgi_url\">go back to the form</a>
	and try again.$footer";
        exit();
    }
}

sub check_password {

    open( FILE, "$allentries" )
        || &debug("Can't open $allentries for reading: $!");

    # Look for a line beginning with their email address.
    @lines = grep( /^$email%%/, <FILE> );
    close(FILE);

    # If it's blank, they have no reminders, so check and see if they're
    # in the users file.
    if ( $lines[0] eq "" ) {
        open( USR, "$users_file" )
            || &debug("Could not open users file $users_file: $!");
        @lines = grep( /^$email%%/, <USR> );
        close(USR);
    }

    # We only really need the first line, so split the fields
    # in the first one we found.
    chomp( $lines[0] );
    @fields = split( "%%", $lines[0] );

    # If $fields[0] is empty, we found no entries with that email address.
    # Must be a new one going to add an entry, so make sure Formaction is
    # Add, and make sure they entered the password twice.
    if ( $data{'Formaction'} eq "Add" ) {

        # Either they are a new member, or we need to check the password.
        if ( $fields[0] eq "" ) {

            if (    $data{'Password'} eq $data{'Password2'}
                 && $data{'Password'}  ne ""
                 && $data{'Password2'} ne "" )
            {
                $pass_check = 1;
            }
            else {
                print &ct;
                print "$header Non-Matching passwords<br><br>
                It appears that this is your first time using
                this service, or else you have no reminders in the
                system. For your privacy, your address is removed from
                the database when all your reminders have been sent,
                but you can sign up for more reminders at any time -- just
                choose a new password (or the same one you used before
                if you like!) and sign up again.
                <br><br>In order to make sure that you
                will be able to use your password later, we
                need to have you confirm what you'd like your
                password to be.  However, the two passwords
                you entered did not match, or you did not enter a password
                at all.  Please <a
                onClick=\"javascript:history.back();\"
                href=$ENV{'HTTP_REFERER'}>
                go back to the form</a> and try again.$footer";
                exit();
            }
        }
        else {

            # We need to check their pw
            if (    $password eq $fields[1]
                 && $password  ne ""
                 && $fields[1] ne ""
                 && $fields[0] eq $email
                 && $email ne "" )
            {
                $pass_check = 1;
            }
            else {
                if ( $fields[0] ne $email ) {
                    $errmessage
                        = "<b>Error: No such email address ($email) on file.</b><br>";
                    &show_register_screen;
                    exit();
                }
                print &ct;
                print "$header<center><strong>Sorry, Incorrect Password
                </strong></center><br><br>
                The password that you entered does not match
                the one we have on file for $email.  If you feel
                this is incorrect, please <a
                onClick=\"javascript:history.back();\"
                href=$ENV{'HTTP_REFERER'}>
                return to the form</a> and try again, or have
                your password mailed to you by clicking below.
                <form action=$cgi_url>
                <input type=hidden name=Formaction value=Mailpassword>
                <input type=hidden name=Email value=$email>
                <input type=submit value=\"Mail me my password.\">
                </form>$footer";
                exit();

            }
        }
    }    # end if formaction eq Add

    # If the formaction is NOT Add, then we must have found $fields[0].
    # Also, $fields[0] MUST match $email. If not, it is an incorrect
    # password
    else {

        # Formaction is not Add.
        if (    $password eq $fields[1]
             && $password  ne ""
             && $fields[1] ne "" )
        {
            $pass_check = 1;
        }
        else {
            if ( $email eq "" || $password eq "" ) {
                $errmessage = "<b>Error: Please enter your email address and 
			   password to list your reminders.</b><br>";
                &show_login_screen;
                exit();
            }
            if ( $fields[0] ne $email ) {
                $errmessage
                    = "<b>Error: No such email address ($email) on file.</b><br>";
                &show_register_screen;
                exit();
            }
            print &ct;
            print "$header<center><strong>Sorry, Incorrect Password
                </strong></center><br><br>
                The password that you entered does not match
                the one we have on file for $email.  If you feel
                this is incorrect, please <a
                onClick=\"javascript:history.back();\"
                href=$ENV{'HTTP_REFERER'}>
                return to the form</a> and try again, or have
                your password mailed to you by clicking below.
                <form action=$cgi_url>
                <input type=hidden name=Formaction value=Mailpassword>
                <input type=hidden name=Email value=$email>
                <input type=submit value=\"Mail me my password.\">
                </form>$footer";
            exit();

        }
    }

}

sub mail_password {

    undef $/;
    open( FILE, "$mail_footer_file" )
        || &debug("Can't open $mail_footer_file for reading: $!");
    $mailfooter = <FILE>;
    close(FILE);
    $/ = "\n";
    open( FILE, "$allentries" )
        || &debug("Can't open $allentries for reading: $!");
    @lines = grep( /^$email%%/, <FILE> );
    close(FILE);
    chop( $lines[0] );
    @fields = split( "%%", $lines[0] );

    if ( $fields[0] eq $email ) {
        $mailmessage = "
Here is your password for the $owner_name service:

  $fields[1]

This password will only be mailed to the email address we
have on file for you.";
        $mailmessage .= "\n$mailfooter";
        $subject = "Auto-mail password";
        $fields[0] =~ s/\s+//sg;
        &send_mail( $fields[0],            "$fields[0]",
                    $owner_email,          $owner_name,
                    $owner_email,          $owner_name,
                    $subject,              $mailmessage,
                    $mail_server_hostname, $this_server_hostname,
                    $opsys,                $htmlmail
                  );

        print &ct;
        $errmessage = "<b>Success! Your password has been mailed to you at 
		the address we have on file.</b><br>";
        &show_login_screen();
        exit();
    }

    # Check the users file if we didn't find it in allreminders
    if ( $mailmessage eq "" ) {
        open( FILE, "$users_file" )
            || &debug("Can't open $users_file for reading: $!");
        @lines = grep( /^$email%%/, <FILE> );
        close(FILE);
        chomp( $lines[0] );
        @fields = split( "%%", $lines[0] );
        if ( $fields[0] eq $email ) {
            $mailmessage = "
Here is your password for the $owner_name service:

  $fields[1]

This password will only be mailed to the email address we
have on file for you.";
            $mailmessage .= "\n$mailfooter";
            $subject = "Auto-mail password";
            $fields[0] =~ s/\s+//sg;
            &send_mail( $fields[0],            "$fields[0]",
                        $owner_email,          $owner_name,
                        $owner_email,          $owner_name,
                        $subject,              $mailmessage,
                        $mail_server_hostname, $this_server_hostname,
                        $opsys,                $htmlmail
                      );

            print &ct;
            $errmessage
                = "<b>Success! Your password has been mailed to you at 
		the address we have on file.</b><br>";
            &show_login_screen();
            exit();
        }

    }
    print &ct;
    $errmessage = "<b>Error: Email not found. Please try again.</b><br>";
    &show_login_screen();
    exit();

}

sub list_reminders {

    if ( $email eq "" ) {
        print &ct;
        $errmessage
            = "<b>Error: No email address. Please enter your email address so we can find your reminders.</b><br>";
        &show_login_screen();
        exit();
    }
    open( FILE, "$allentries" )
        || &debug("Can't open $allentries for reading: $!");
    @lines = grep( /^$email/, <FILE> );
    close(FILE);
    if ( $lines[0] eq "" ) {
        print &ct;
        &show_main_screen(
            "<table border=1><tr><td bgcolor=#FFFFFF><font color=#FF0000><center><b>You have no reminders waiting at this time.</b></center></font></td></tr></table>"
        );
        exit();
    }
    else {

        # Put the reminders in ascending date order
        @lines
            = sort { ( split( /\%%/, $a ) )[3] cmp( split( /\%%/, $b ) )[3]; }
            @lines;

        print &ct;
        print "$header<br>$_[0]<BR>
	    <table border=0 width=100%>
		<form method=POST action=$cgi_url>
		<input type=hidden name=Formaction value=\"ShowAddScreen\">
		<input type=hidden name=Email value=\"$data{'Email'}\">
		<input type=hidden name=Password value=\"$data{'Password'}\">
		<tr><td align=right><input type=submit value=\"Add Reminders\">
                </td></tr></table></form>
	    <center><strong>Reminders Pending</strong></center>
	   <hr>
	   <table border=1>
	   <tr><th>Date</th><th>Send Reminder on:</th><th>How Often</th><th>How Far<br>in advance</th><th>Message</th><th colspan=2>Action</th>
	   </tr>";

#"$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
        foreach $line (@lines) {
            @fields = split( "%%", $line );
            $reminder_date = &get_date( $fields[5] );
            $fields[$#fields] =~ s/NEWLINE/<br>/g;

            if ( $fields[4] == 1 ) { $fields[4] = "1 day"; }
            else { $fields[4] = "$fields[4] days"; }
            $oldline = $line;
            chomp($oldline);
            print "<form method=POST action=$ENV{'SCRIPT_NAME'}>
		 <input type=hidden name=Email value=\"$data{'Email'}\">
		 <input type=hidden name=Password value=\"$data{'Password'}\">
		 <input type=hidden name=Oldline value=\"$oldline\">
		 <tr><td>" . &get_date( $fields[5] ) . "</td>
		     <td>" . &get_date( $fields[3] ) . "</td>
		     <td>$fields[2]</td>
		     <td>$fields[4]</td>
		     <td>$fields[6]</td>
		     <td bgcolor=#C0C0C0><input type=submit 
		     name=Formaction value=Edit></td>
		     <td bgcolor=#C0C0C0><input type=submit 
		     name=Formaction value=Delete></td>
		 </tr></form>\n";
        }
        print "</table>$footer";
    }
}

sub convert_date {

    $month = $months{$form_month};
    print &ct;

    #$remindmeof_seconds = timelocal(0,0,0,$form_day,$month,$form_year);
    eval('$remindmeof_seconds = timelocal(0,0,0,$form_day,$month,$form_year);'
    );
    if ($@) {
        print "$header <font size=+1>Error: Invalid date</font>
	  <br><br>
	  Sorry, you have picked an invalid date. Please
	  check your entry and try again.
	  $footer";
        exit();
    }

    if ( $remindmeof_seconds < time ) {
        print &ct;
        $bad_date = &get_date($remindmeof_seconds);
        print "$header <font size=+1>Error: Invalid date</font>
	  <br><br>
	  You have requested to be reminded of a date that
	  is either today, or that has already passed ($bad_date). Please
	  check your entry and try again.
	  $footer";
        exit();
    }

    $number = $remindme;
    $number =~ s/\D+//g;
    if ( ( $number > 365 || $number < 1 || $number eq "" )
         && $remindme ne "On" )
    {
        print &ct;
        print "$header <font size=+1>Error</font><br><Br>
	You have requested to be reminded more than 1 year or less
	than one day in
	advance of your requested date. This program only supports
	sending reminders one day to one year in advance.  Please
	<a onClick=\"javascript:history.back();\"
	href=\"$ENV{'HTTP_REFERER'}\">try again</a>.
	$footer";
        exit();
    }

    #                         this day - this many days in advance

    if ( $remindme eq "On" ) { $number = 0; }

    $remindmeon_seconds = ($remindmeof_seconds) - ( 86400 * $number );

    if ( $remindmeon_seconds < ( time - 86400 ) ) {
        print &ct;
        $bad_date = &get_date($remindmeon_seconds);
        print "$header <font size=+1>Error: Invalid date</font>
	  <br><br>
	  You have requested to be reminded on a date that
	  is either today, or that has already passed ($bad_date). Please
	  check your entry and try again.
	  $footer";
        exit();
    }
    $chosen_date = &get_date($remindmeof_seconds);
    $remind_date = &get_date($remindmeon_seconds);

    if (    $form_month eq "Feb"
         && $form_day > 28
         && ( int( $form_year / 4 ) ne $form_year / 4 ) )
    {
        &invalid_date;
    }
    elsif ( $form_month eq "Feb" && $form_day > 29 ) {
        &invalid_date;
    }
    elsif ( (    $form_month eq "Sep"
              || $form_month eq "Apr"
              || $form_month eq "Jun"
              || $form_month eq "Nov"
            )
            && $form_day > 30
          )
    {
        &invalid_date;
    }
    else {

        if ( $_[0] eq "temp_only" ) {
            if ( $already_wrote_it != 1 ) {
                open( FILE, ">>$temp_reminders" )
                    || &debug(
                     "Can't open temporary reminders file to add reminder: $!"
                    );
                if ( $opsys eq "unix" ) { flock( FILE, 2 ); }
                print FILE
                    "$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
                close(FILE);
                $already_wrote_it = 1;
            }
            return;
        }
        if ( $already_wrote_it != 1 ) {
            open( FILE, ">>$allentries" )
                || &debug("Can't open $allentries to add reminder: $!");
            if ( $opsys eq "unix" ) {
                flock( FILE, 2 )
                    || &debug(
                     "Can't lock $allentries: $!. Do you have file locking?");
            }
            else { binmode(FILE); }
            print FILE
                "$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
            close(FILE);
        }

        $remind_date =~ s/\n//;
        $chosen_date =~ s/\n//g;
        undef $/;
        open( FILE, "$mail_footer_file" )
            || &debug("Can't open $mail_footer_file for reading: $!");
        $mailfooter = <FILE>;
        close(FILE);
        $/ = "\n";

        $mailmessage = "$mail_header

Thank you for using the $owner_name Reminder Service.  

This is just a confirmation message to let you know your reminder
has been added to the system, and will be sent on the date(s) you
specified.

You asked to be reminded $sendme $remindme days in advance of 
$chosen_date for the following:

$message";
        $mailmessage .= "\n$mailfooter\n";
        $mailmessage .= "
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
To permanently remove your email address from our reminder service,
use this link:
 $cgi_url?FA=oo&em=$email
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=";
        $subject = "Reminder added";
        $email =~ s/\s+//sg;
        &send_mail( $email,                "$email",
                    $owner_email,          $owner_name,
                    $owner_email,          $owner_name,
                    $subject,              $mailmessage,
                    $mail_server_hostname, $this_server_hostname,
                    $opsys,                $htmlmail
                  );

        print &ct;
        if ( $_[0] eq "Modified" ) {
            &list_reminders(
                "<center><strong>Reminder Successfully $_[0]</strong></center><br><br>The date you chose is $chosen_date.\n<br>You want to be reminded of the following $sendme,$remindme day(s) in advance of that date. ($remind_date):<br><br>$data{'Message'}"
            );
        }
        else {
            &show_main_screen(
                "<center><strong>Reminder Successfully $_[0]</strong></center><br><br>The date you chose is $chosen_date.\n<br>You want to be reminded of the following $sendme,$remindme day(s) in advance of that date. ($remind_date):<br><br>$data{'Message'}"
            );
        }
        exit();
    }

}

sub invalid_date {
    print &ct;
    print "$header 
        Sorry, but $form_month $form_day, $form_year is an invalid date.
	Please <a onClick=\"javascript:history.back();\"
	href=$ENV{'HTTP_REFERER'}>Try Again</a>
	$footer";
    exit();
}

sub send_reminders {

    if (    $ENV{'QUERY_STRING'} eq "send-reminders"
         || $ENV{'QUERY_STRING'} eq "send_reminders" )
    {
        print &ct;
        $rstart = time;
        print "$header Sending reminders.";
    }
    my ( $line, @lines, @fields );
    open( REMINDERS, "+<$allentries" )
        || &debug(
               "In \&send_reminders: Can't open $allentries for reading: $!");
    if ( $opsys eq "unix" ) {
        flock( REMINDERS, 2 ) || &debug("Can't lock $allentries: $!");
    }
    else { binmode(REMINDERS); }
    @lines = grep( !/^#/, <REMINDERS> );

    foreach $line (@lines) {
        (  $email, $pw, $sendme, $remindmeon, $remindme, $remindmeof,
           $filemessage
        ) = split( "%%", $line );

#"$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
        $remindmeon_date = &get_date($remindmeon);
        $remindmeof_date = &get_date($remindmeof);
        $todays_date     = &get_date();

        chomp($line);
        &debug(
            "Today's date is '$todays_date' Reminder date is '$remindmeon_date'"
        );
        my $rightnow = time;
        if ( $send_skipped_reminders == 1 ) {
            if ( $remindmeon < $rightnow ) {
                $do_skipped = 1;
            }
            else {
                $do_skipped = 0;
            }
        }
        else {
            $do_skipped = 0;
        }
        &debug("Remindmeon $remindmeon Rightnow $rightnow Message $filemessage");
        if ( $remindmeon_date eq $todays_date || $do_skipped == 1 ) {
            &debug("Sending reminder...");
            &mail_reminder;
            $sentr++;
            if ( $sendme eq "Annually" ) { 
                $newtime = &update_monthly( $remindmeon, 12); 
                $update = $newtime - $remindmeon;
            }
            elsif ( $sendme eq "Semi-Annually" ) {
                $newtime = &update_monthly( $remindmeon, 6 );
                $update = $newtime - $remindmeon;
            }
            elsif ( $sendme eq "Quarterly" ) {
                $newtime = &update_monthly( $remindmeon, 3 );
                $update = $newtime - $remindmeon;
            }
            elsif ( $sendme eq "Bi-Monthly" ) {
                $newtime = &update_monthly( $remindmeon, 2 );
                $update = $newtime - $remindmeon;
            }
            elsif ( $sendme eq "Weekly" )    { $update = 7 * 86400; }
            elsif ( $sendme eq "Bi-Weekly" ) { $update = 14 * 86400; }
            elsif ( $sendme eq "Daily" )     { $update = 86400; }
            else {
                $newtime = &update_monthly( $remindmeon, 1 );
                $update = $newtime - $remindmeon;
            }

            $date_to_be_reminded_on = $remindmeon + $update;
            $new_remind_date        = $remindmeof + $update;
            $line
                = "$email%%$pw%%$sendme%%$date_to_be_reminded_on%%$remindme%%$new_remind_date%%$filemessage";
            # Get rid of nasty cr/lf
            $line =~ s/\r\n/\n/g;
            $line =~ s/\r/\n/g;
            $line =~ s/\n+$//g;
            $line =~ s/\r\n/NEWLINE/g;
            $line =~ s/\r/NEWLINE/g;
            $line =~ s/\n/NEWLINE/g;

            if ( $line =~ /%%Once Only%%/ ) {

                # Just save their username/password in the users
                # file.
                &check_users_file( $email, $pw );

                # But delete the reminder from the file.
                $line = "";
            }
        }
        if ( $line ne "" ) {
            $newfile .= "$line\n";
        }
    }    #end foreach line
    truncate( REMINDERS, length($newfile) );
    seek( REMINDERS, 0, 0 );
    print REMINDERS $newfile;
    close(REMINDERS);
    if ( $ENV{'QUERY_STRING'} eq "send_reminders" ) {
        print &ct;
        $rend  = time - $rstart;
        $sentr = $sentr * 1;
        print " Sent $sentr reminders in $rend seconds. $footer";
    }

}

sub update_monthly {

    my ( $u_day, $u_mon, $u_year ) = ( localtime( $_[0] ) )[ 3, 4, 5 ];
    my $newtime;
    my $i;
    my $num = $_[1];

    $u_year = $u_year + 1900;
    for ( $i = 1; $i <= $num; $i++ ) {
        $u_mon += 1;
        if ( $u_mon > 11 ) {
            $u_mon  = 0;
            $u_year = $u_year + 1;
        }
    }

    # If the month is feb, make sure it doesn't go over
    # the last day of the month.
    if ( $u_mon == 1 && $u_day > 28 ) {
        $u_day = 28;
    }
    if ( ( $u_mon == 3 || $u_mon == 5 || $u_mon == 8 || $u_mon == 10 )
         && $u_day > 30 )
    {
        $u_day = 30;
    }
    $newtime = timelocal( 0, 0, 0, $u_day, $u_mon, $u_year );
    $newtime;
}

sub mail_reminder {
    $todays_date =~ s/\n//g;
    $remind      =~ s/\n//g;
    undef $/;
    open( FILE, "$mail_footer_file" )
        || &debug(
         "In \&mail_reminders: Can't open $mail_footer_file for reading: $!");
    $mailfooter = <FILE>;
    close(FILE);
    $/ = "\n";
    $filemessage =~ s/NEWLINE/\n/g;

#   "$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
    &debug("Opening mail to $email to send reminder...");

    &get_date();
    $mailmessage = "$mail_header\n";
    $mailmessage .= "
Sent: $date

Here's your reminder for $remindmeof_date ($remindme day(s) in advance):

$remindmeof_date

    $filemessage";
    $mailmessage .= "\n\n$mailfooter\n";
    $mailmessage .= "
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
To permanently remove your email address from our reminder service,
use this link:
 $cgi_url?FA=oo&em=$email
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=";
    $subject = "$reminder_subject";
    $email =~ s/\s+//sg;
    &send_mail( $email,                "$email",
                $owner_email,          $owner_name,
                $owner_email,          $owner_name,
                $subject,              $mailmessage,
                $mail_server_hostname, $this_server_hostname,
                $opsys,                $htmlmail
              );
}

sub edit_mail_footer {
    print &ct;
    &password_check;
    undef $/;
    open( FILE, "$mail_footer_file" )
        || &debug(
         "In \&edit_mail_footer: Can't open $mail_footer_file for reading: $!"
        );
    $mailfooter = <FILE>;
    close(FILE);
    $/ = "\n";
    if ( $data{'edit_footer'} eq "" ) {

        print "$header<center><strong>Edit Mail Footer</strong></center>
	Below is the text you entered.  Please be sure that it
	is the way you like it before clicking \"Save Changes\".
	 <form method=POST action=$cgi_url><br>
	 <input type=hidden name=edit_footer value=Yes>
	 <textarea name=Newfooter rows=6 cols=50>$data{'Newfooter'}</textarea>
	<br>
	<center><strong>Your previous text is reprinted below</strong>
	</center><br>
	 <pre>\n$mailfooter\n</pre>
	 <input type=hidden name=Password value=$data{'Password'}>
   	 <input type=hidden name=Formaction value=Edit_mail_footer>
	 <input type=submit value=\"Save Changes\">
	 <input type=button onClick=\"javascript:history.back();\" value=\"No, Go back.\">
	 </form>$footer";
        exit();
    }
    elsif ( $data{'edit_footer'} eq "Yes" ) {

        open( FILE, ">$mail_footer_file" )
            || &debug(
            "In \&edit_mail_footer: Can't open $mail_footer_file for writing: $!"
            );
        if ( $opsys ne "win" ) {
            flock( FILE, 2 ) || &debug("Can't lock $mail_footer_file. $!");
        }

        print FILE "$data{'Newfooter'}";
        close(FILE);

        print "$header<strong><center>Success!</center></strong><br><br>
	Your mail footer has been changed to the following.  If you
	have made an error, please <a onClick=\"javascript:history.back();\"
	href=$ENV{'HTTP_REFERER'}>
	go back</a> and correct it.<br>
	<pre>
$data{'Newfooter'}
</pre>
$footer";
    }
}

#########################################################################
##### 	3.  check_password:  "encrypts" the password and checks		#
#####	    it against the encrypted site maintenance password. 	#
#####	    This is still NOT very secure, since anyone who can read  	#
#####	    your passfile.txt file can probably also read this program  #
#####       and thus figure it out. 					#
#####	    Really it's just in here so we don't have passwords in 	#
#####	    open text form sitting on your server.  If this is really 	#
#####	    VITAL that this is not cracked, then put server side 	#
#####	    security on your web server and use a different program.	#
#########################################################################

sub password_check {

    $password = $data{'Password'};

    # Read the password from the password file...

    open( FILE, "+<$password_file" )
        || &debug(
            "In \&password_check: Can't open $password_file for reading: $!");
    if ( $opsys eq "unix" ) {
        flock( FILE, 2 ) || &debug("Could not lock $password_file: $!");
    }
    else { binmode(FILE); }
    $real_password = <FILE>;
    chomp($real_password);

    # Demo shouldn't change the password
    if (    $ENV{'SERVER_NAME'} !~ /tesol.net/i
         && $ENV{'SERVER_NAME'} !~ /linguistic-funland.com/i )
    {
        if ( $real_password eq "password" ) {
            $real_password = crypt( "password", time . $$ );
            truncate( FILE, length($real_password) );
            seek( FILE, 0, 0 );
            print FILE "$real_password";
        }
    }
    close(FILE);

    $new_password = $password;

    # "Encrypt" the password you entered so it will match the
    #  one in the file...If they match, it's okay.

    if ( crypt( $password, $real_password ) eq "$real_password" ) {
        $pass_check = 1;
    }

    # If they don't match, print out an "Incorrect Password" message,
    # allowing you to go back and change it, and exit the program.

    else {
        print &ct;
        $pass_check = 0;
        print "$header<hr><strong>Sorry, incorrect password.</strong>
	   Please <a onClick=\"javascript:history.back();\"
	   href=\"$ENV{'HTTP_REFERER'}\">try again</a>.
	   <hr>$footer\n";
        exit();
    }
}

#########################################################################
##### 	7.  change_password:  Allows you to change your password	#
#####	    with some minor error checking to make sure that your	#
#####	    new password matches.					#
#########################################################################

sub change_password {
    $password      = $data{'Password'};
    $new_password1 = $data{'New_password'};
    $new_password2 = $data{'New_password2'};
    &password_check;
    print &ct;
    if (    $new_password1 ne $new_password2
         || $new_password1 eq ""
         || $new_password2 eq "" )
    {
        print "$header<hr><strong>
	Error:  New Password and Confirm New Password do not match.
	Please try again: </strong><P>
	<form method=\"POST\" action=\"$cgi_url\">
	<table border=0>
	<tr><td><strong>New Password: </strong></td>
	<td><input type=password size=20 name=\"New_password\"></td></tr>
   	<tr><td><strong>Confirm New Password:</strong></td>
	<td><input type=password size=20 name=\"New_password2\"></td></tr>
	</table>
	<input type=hidden name=\"Action\" value=\"Changing\">
	<input type=hidden name=\"Password\" value=\"$data{'Password'}\"><br><br>
	<input type=hidden name=Formaction value=Change_password>
  	<input type=submit value=\"Change Password\"><input type=reset>
	</form>
	<hr>
	$footer";
        exit();
    }

    else {
        $new_password1 = crypt( $new_password1, time . $$ );

        # This is just here so the demo version on my server will not change
        # the password, since this gets annoying. :-)
        if (    $ENV{'SERVER_NAME'} !~ /tesol.net/i
             && $ENV{'SERVER_NAME'} !~ /linguistic-funland.com/i )
        {
            open( PASSFILE, ">$password_file" )
                || &debug(
                "In \&change_password: Can't open $password_file for writing: $!"
                );
            print PASSFILE "$new_password1";
            close(PASSFILE);
        }
        print "$header<hr><strong>Password Successfully Changed!</strong>
                 <form method=POST action=$ENV{'SCRIPT_NAME'}>
                 <input type=hidden name=Password value=\"$new_password2\">
                 <input type=hidden name=FA value=\"Admin Menu\">
                 <input type=submit value=\"Return to administration\">
                 </form>
	       <hr>$footer";
    }
}

sub get_date {

    $date_in_seconds = $_[0];
    @months = ( 'January',   'February', 'March',    'April',
                'May',       'June',     'July',     'August',
                'September', 'October',  'November', 'December'
              );

    if ( $date_in_seconds ne "" ) {
        ( $sec, $min, $hour, $mday, $mon, $year )
            = ( localtime($date_in_seconds) )[ 0, 1, 2, 3, 4, 5 ];
    }
    else {
        ( $sec, $min, $hour, $mday, $mon, $year )
            = ( localtime(time) )[ 0, 1, 2, 3, 4, 5 ];
    }

    $year += 1900;
    $date = "$months[$mon] $mday, $year";
    if ( $_[1] eq "long" ) {
        $mon  = sprintf( "%.2d", $mon + 1 );
        $mday = sprintf( "%.2d", $mday );
        $hour = sprintf( "%.2d", $hour );
        $min  = sprintf( "%.2d", $min );
        $sec  = sprintf( "%.2d", $sec );
        $date = "$mon/$mday/$year $hour:$min:$sec";
    }
    $date;

}

sub debug {

    if ( $debugging == 1 ) {
        print &ct;
        print "DEBUGGING INFO: $_[0]<br>\n";
        if ( !$ENV{'QUERY_STRING'} ) { print "\n"; }
        else { print "<br>\n"; }
    }
    elsif ( $debugging eq "die" ) {
        die("$_[0]");
    }
}

#&send_mail("to_email","to_name","from_email","from_name","replyto_email",
#               "replyto_name","subject","message","mail_server_hostname",
#              "this_server_hostname",$opsys,$htmlmail,$smtp_auth,
#               $pop_un,$pop_pw);
sub send_mail {
    local ( $toemail,              $toname,
            $fromemail,            $fromname,
            $replytoemail,         $replytoname,
            $subject,              $message,
            $mail_server_hostname, $this_server_hostname,
            $opsys,                $htmlmail,
            $smtp_auth,            $pop_un,
            $pop_pw
          ) = @_;

    my @headervars = ( 'toemail',      'toname',
                       'fromemail',    'fromname',
                       'replytoemail', 'replytoname',
                       'subject'
                     );

    $CRLF = "\015\012";    # Make sure we have the correct line endings

    # Basically, we're taking out any newlines or extraneous spaces
    # plus any ", <>, commas, or single quotes as well before we
    # attempt to send.
    my ($hvar);
    foreach $hvar (@headervars) {
        ${$hvar} =~ s/\s+/ /sg;
        ${$hvar} =~ s/[\"<>,']//sg;
    }

    # Also, the message needs to have CRLF on the end of each line or
    # qmail will be unhappy.
    $message =~ s/\r\n/\n/sg;
    $message =~ s/\r/\n/sg;
    $message =~ s/\n/$CRLF/sg;
    $0 = "RemindMe v3.0.12";
    &debug("Attempting to send message \"$subject\" to $toemail");
    my ($boundary) = crypt( "blah", time . $$ ) . time . $$;

    # I don't want my demo to mail.
    if ( (    $ENV{'SERVER_NAME'} =~ /linguistic-funland.com$/i
           || $ENV{'SERVER_NAME'} =~ /tesol.net$/i )
       )
    {
        print "Email has been disabled in this demo.<br>";
        return;
    }

    if ( $opsys eq "win" || $mail_method eq "socket" ) {
        my ( $port, $child, $proto );

        # Switch to $auth_from_address if there is one.
        if ( ( $smtp_auth eq "POP" || $smtp_auth eq "SMTP" )
             && $auth_from_address )
        {
            $fromemail = $auth_from_address;
        }

        # Do pop-before-smtp auth if necessary.
        if ( $smtp_auth eq "POP" ) {
            &do_pop_auth( $this_server_hostname, $mail_server_hostname,
                          $pop_un, $pop_pw );
        }
        my $port = 25;
        use Socket;

        $SIG{'INT'} = 'dokill';

        sub dokill {
            kill 9, $child if $child;
        }

        my $proto = 6;    # tcp

        $this = pack_sockaddr_in( 0, inet_aton($this_server_hostname) );
        $that = pack_sockaddr_in( $port, inet_aton($mail_server_hostname) );

        if ( socket( S, AF_INET, SOCK_STREAM, $proto ) ) {
            &debug("Created socket.");
        }
        else { &debug("Could not create socket for mail: $!"); }

        if ( connect( S, $that ) ) {
            &debug("Connected to socket.");
        }
        else { &debug("Could not connect to socket: $!"); }

        # Unbuffer the output for socket and stdout
        select(S);
        $| = 1;
        select(STDOUT);
        $| = 1;
        &debug( "Server responded: " . read_response() ) if $no_more != 1;

        # SMTP auth is done in the same socket connection, so let's do it now.
        if ( $smtp_auth eq "SMTP" ) {
            &do_smtp_auth( $pop_un, $pop_pw );
        }

        # We don't need HELO with SMTP auth because we already did EHLO
        else {
            &debug("I sent: HELO $this_server_hostname\\r\\n")
                if $no_more != 1;
            print S "HELO $this_server_hostname$CRLF";
            &debug( "Server responded: " . read_response() ) if $no_more != 1;
        }
        &debug("I sent: MAIL FROM:&lt;$fromemail&gt;\\r\\n") if $no_more != 1;
        print S "MAIL FROM:<$fromemail>$CRLF";
        &debug( "Server responded: " . read_response() ) if $no_more != 1;
        &debug("I sent: RCPT TO:&lt;$toemail&gt;\\r\\n") if $no_more != 1;
        print S "RCPT TO:<$toemail>$CRLF";
        &debug( "Server responded: " . read_response() ) if $no_more != 1;
        &debug("I sent: DATA\\r\\n")                     if $no_more != 1;
        print S "DATA$CRLF";
        &debug( "Server responded: " . read_response() )     if $no_more != 1;
        &debug("I sent: To: $toname &lt;$toemail&gt;\\r\\n") if $no_more != 1;
        print S "To: $toname <$toemail>$CRLF";
        &debug("I sent: From: $fromname &lt;$fromemail&gt;\\r\\n")
            if $no_more != 1;
        print S "From: $fromname <$fromemail>$CRLF";

        if ( $replytoemail ne "" ) {
            &debug(
                 "I sent: Reply-to: $replytoname &lt;$replytoemail&gt;\\r\\n")
                if $no_more != 1;
            print S "Reply-to: $replytoname <$replytoemail>$CRLF";
        }
        if ( !$x_auth_header ) { $x_auth_header = "X-Auth-Type: None"; }
        print S "$x_auth_header$CRLF";
        print S "X-Mailer: $0 http://tesol.net/scripts/$CRLF";
        &debug("I sent: Subject: $subject\\r\\n") if $no_more != 1;
        print S "Subject: $subject$CRLF";
        if ( $htmlmail eq "yes" ) {
            &debug("Putting in HTML message\\r\\n") if $no_more != 1;
            print S "MIME-Version: 1.0$CRLF";
            print S
                "Content-type: MULTIPART/MIXED; BOUNDARY=\"$boundary\"$CRLF";
            print S "--$boundary$CRLF";
            print S "Content-type: text/html;$CRLF$CRLF";
            print S "$message$CRLF";
            print S "$CRLF$CRLF";
            print S "--$boundary$CRLF";
            print S "Content-type: TEXT/PLAIN; charset=US-ASCII$CRLF$CRLF";
            print S "$message--$boundary--$CRLF";
        }
        else {
            &debug("Putting in plain text message\\r\\n") if $no_more != 1;
            print S "$CRLF";
            print S "$message$CRLF";
        }
        &debug("I sent: .\\r\\n") if $no_more != 1;
        print S ".$CRLF";
        &debug( "Server responded: " . read_response() ) if $no_more != 1;
        &debug("I sent: QUIT\\r\\n")                     if $no_more != 1;
        print S "QUIT$CRLF";
        &debug( "Server responded: " . read_response() ) if $no_more != 1;
        &debug("Sending mail done.")                     if $no_more != 1;

    }

    elsif ( $opsys eq "unix" ) {

        # Allow for qmail-inject ~sigh~
        # Most other mailer thingies do use the -t option like
        # sendmail in order to be compatible, but apparently
        # qmail-inject does not. Oh well...

        if ( $path_to_sendmail !~ /qmail-inject/ ) {
            $path_to_sendmail = "$path_to_sendmail -t";
        }

        open( MAIL, "|$path_to_sendmail" )
            || &debug("Could not open sendmail: $!");
        print MAIL "To: \"$toname\" <$toemail>\n";
        print MAIL "From: \"$fromname\" <$fromemail>\n";
        if ( $replytoemail ne "" ) {
            print MAIL "Reply-to: \"$replytoname\" <$replytoemail>\n";
        }
        print MAIL "Subject: $subject\n";
        if ( $htmlmail eq "yes" ) {
            print MAIL "MIME-Version: 1.0\n";
            print MAIL
                "Content-type: MULTIPART/MIXED; BOUNDARY=\"$boundary\"\n";
            print MAIL "--$boundary\n";
            print MAIL "Content-type: text/html;\n\n";
            print MAIL "$message\n";
            print MAIL "\n\n";
            print MAIL "--$boundary\n";
            print MAIL "Content-type: TEXT/PLAIN; charset=US-ASCII\n\n";
            print MAIL "$message--$boundary--\n";
        }
        else {
            print MAIL "\n";
            print MAIL "$message\n";
        }
        close(MAIL) || &debug("Sending mail got an error: $! $?");
        &debug("Sending mail done.");
    }

    else {

        &debug(
            "Cannot send mail. '$opsys' is not a valid operating system, or
	   I could not determine how you want to send mail.
           Please set \$opsys to either 'unix' or 'win' in the script
           and try this again."
              );
    }
}

# Usage: do_pop_auth(local_server_hostname,mail_server_hostname,username,pw);
# Opens a socket connection to the pop server to do POP-before-SMTP
# authentication.

sub do_pop_auth {
    my ( $this_server_hostname, $mail_server_hostname, $username, $password )
        = @_;
    use Socket;
    $port = 110;

    $x_auth_header = "X-Auth-Type: POP-BEFORE-SMTP";

    my $CRLF = "\r\n";
    $SIG{'INT'} = 'dokill';

    sub dokill {
        kill 9, $child if $child;
    }

    my $proto = 6;

    $this = pack_sockaddr_in( 0, inet_aton($this_server_hostname) );
    $that = pack_sockaddr_in( $port, inet_aton($mail_server_hostname) );

    if ( socket( S, AF_INET, SOCK_STREAM, $proto ) ) {
        &debug("Created S socket for pop auth.");
    }
    else { &debug("Could not create socket for pop auth: $!"); }

    if ( connect( S, $that ) ) {
        &debug("Connected to S socket for pop auth.");
    }
    else { &debug("Could not connect to socket for pop auth: $!"); }

    select(S);
    $| = 1;
    select(STDOUT);
    $| = 1;

    &debug( "Server responded: " . read_response() ) if $no_more != 1;
    &debug("I sent: USER $username\\r\\n")           if $no_more != 1;
    print S "USER $username$CRLF";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;
    &debug("I sent: PASS &lt;password&gt;\\r\\n")    if $no_more != 1;
    print S "PASS $password$CRLF";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;
    if ( $_ !~ /OK/ ) { &debug("Ooops. Username/PW incorrect."); }
    else {
        &debug("I sent: QUIT\\r\\n") if $no_more != 1;
        print S "QUIT$CRLF";
        &debug( "Server responded: " . read_response() ) if $no_more != 1;
    }
    close(S) || &debug("Could not close S socket: $!\n");
    &debug("POP before SMTP attempt complete.");

}

# Usage: do_smtp_auth($username,$password);
# Assumes that your socket connection to the SMTP port of the mail server
# is already open from sub send_mail above.

sub do_smtp_auth {

    my ( $username, $password ) = @_;
    $x_auth_header = "X-Auth-Type: SMTP-AUTH-LOGIN";

    &debug("I sent: EHLO $this_server_hostname\\r\\n") if $no_more != 1;
    print S "EHLO $this_server_hostname\r\n";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;
    &debug("I sent: AUTH LOGIN\\r\\n")               if $no_more != 1;
    print S "AUTH LOGIN\015\012";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;

    # AUTH LOGIN requires username/pw encoded in Base64. However, we don't
    # know if the user will have the Base64 module available, so we'll do it
    # manually.
    $b64_u = join '',
        map( pack( 'u', $_ ) =~ /^.(\S*)/, ( $username =~ /(.{1,45})/gs ) );
    $b64_u =~ tr|` -_|AA-Za-z0-9+/|;
    &debug("I sent: '$b64_u'\\r\\n") if $no_more != 1;
    print S "$b64_u$CRLF";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;
    $b64_p = join '',
        map( pack( 'u', $_ ) =~ /^.(\S*)/, ( $password =~ /(.{1,45})/gs ) );
    $b64_p =~ tr|` -_|AA-Za-z0-9+/|;
    &debug("I sent: '$b64_p'\\r\\n") if $no_more != 1;
    print S "$b64_p$CRLF";
    &debug( "Server responded: " . read_response() ) if $no_more != 1;

    if ( $_ !~ /^235/ ) {
        &debug("ERROR: SMTP authentication failed. Mail may not be sent.");
    }
    &debug("SMTP auth attempt complete.");

}

# Read multi-line responses from our socket connection. Only if
# using a Windows server for mail.
sub read_response {
    my ($socket_says);

    # If we've hit a 500 error, we're not going any further, so go ahead
    # and quit the connection.
    if ( $no_more == 1 ) { return; }
    do {
        $_ = <S>;
        chomp($_);
        $socket_says .= $_ . "\n";
        if (/^5/) {
            &debug(   "\nERROR: Something went wrong."
                    . "Anything beyond this won't work. $server_says " );
            print S "QUIT$CRLF";
            $no_more = 1;
        }
    } while (/^[\d]+-/);
    $socket_says;
}

sub get_data {
    local ($string);

    # get data
    if ( $ENV{'REQUEST_METHOD'} eq 'GET' ) {
        $string = $ENV{'QUERY_STRING'};
    }
    else { read( STDIN, $string, $ENV{'CONTENT_LENGTH'} ); }

    # split data into name=value pairs
    @data = split( /&/, $string );

    # split into name=value pairs in associative array
    foreach (@data) {
        split( /=/, $_ );
        $_[0] =~ s/\+/ /g;          # plus to space
        $_[0] =~ s/%00//g;          # We don' need no steenking nulls :)
        $_[0] =~ s/%0a/newline/g;
        $_[0] =~ s/%(..)/pack("c", hex($1))/ge;    # hex to alphanumeric
        if ( defined( $data{ $_[0] } ) ) {
            $data{ $_[0] } .= "\0";
            $data{ $_[0] } .= "$_[1]";
        }
        else {
            $data{"$_[0]"} = $_[1];
        }
    }

    # translate special characters
    foreach ( keys %data ) {
        $data{"$_"} =~ s/\+/ /g;          # plus to space
        $data{"$_"} =~ s/%00//g;          # We don' need no steenking nulls :)
        $data{"$_"} =~ s/%0a/newline/g;
        $data{"$_"} =~ s/%(..)/pack("c", hex($1))/ge;    # hex to alphanumeric
    }

    %data;    # return associative array of name=value
}

sub ct {

    my $mimeheader;
    if ( $already_printed != 1 ) {
        $mimeheader      = "Content-type: text/html\n\n";
        $already_printed = 1;
    }
    $mimeheader;

}

sub edit_reminder {
    print &ct;
    $oldline = $data{'Oldline'};
    my ( $em, $pw, $sm, $rofs, $rm, $rons, $msg ) = split( /%%/, $oldline );

#"$email%%$password%%$sendme%%$remindmeon_seconds%%$remindme%%$remindmeof_seconds%%$filemessage\n";
    if ( $data{'Confirm'} ne "Yes" ) {

        print "$header
	   $_[0]
           <form method=POST action=$ENV{'SCRIPT_NAME'}>
	   <input type=hidden name=Email value=\"$data{'Email'}\">
	   <input type=hidden name=Password value=\"$data{'Password'}\">
<table border=0>
<tr><td colspan=2><hr></td></tr>
<tr><th colspan=2>Send me a reminder
<select name=Sendme>";

        foreach $howoften (@howoften) {
            if ( $sm eq $howoften ) { $ck = " SELECTED"; }
            else { $ck = ""; }
            print "<option$ck>$howoften\n";
        }
        print "</select> and remind me 
       <input type=text name=Remindme size=4 value=$rm> days in
       advance of <select name=Day>";
        ( $tday, $tmon, $tyear )
            = &get_date_as_numbers( ( split( /%%/, $oldline ) )[5] );
        for ( $i = 1; $i <= 31; $i++ ) {
            if ( $i == $tday ) { $ck = " SELECTED"; }
            else { $ck = ""; }
            print "<option$ck>$i</option>\n";
        }
        print "</select> <select name=Month>\n";
        %mon_by_value = reverse %months;
        foreach $key ( sort { $a <=> $b } ( keys(%mon_by_value) ) ) {
            if ( $key eq $tmon ) {
                $ck = " SELECTED";
            }
            else {
                $ck = "";
            }
            print
                "<option value=\"$mon_by_value{$key}\"$ck>$mon_by_value{$key}\n";
        }
        print "</select> <select name=Year>\n";
        $nyear = ( &get_date_as_numbers(time) )[2];
        $nyear += 1900;
        $tyear += 1900;
        for ( $i = $nyear; $i < $nyear + 10; $i++ ) {
            if ( $tyear eq $i ) { $ck = " SELECTED"; }
            else { $ck = ""; }
            print "<option$ck>$i</option>\n";
        }
        $msg =~ s/NEWLINE/\n/g;
        print "</select></td></tr>
       <tr><td colspan=2><hr></td></tr>
       <tr><th colspan=2 align=center>Please enter a message for yourself:<br></tr>
       <tr><td colspan=2 align=center>
       <textarea name=Message cols=50 rows=3>$msg</textarea><br></tr>
       <input type=hidden name=Formaction value=Edit>
       <input type=hidden name=Confirm value=Yes>
       <input type=hidden name=Oldline value=\"$oldline\">
       <tr><td colspan=2>
       <input type=submit value=\"Make Changes\">
       </td></tr></table></form>$footer";
        exit();
    }
    else {
        &delete_from_file($oldline);
        &convert_date("Modified");

    }

}

sub delete_from_file {
    print &ct;
    my $oldline = $_[0];
    my $newfile = "";
    open( FILE, "+<$allentries" )
        || &debug(
        "Error: Could not open $allentries (reminders file) for
	       read/write. The system returned $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug(
            "Could not lock $allentries (reminders file). The system
	       returned $!" );
    }
    @lines = grep( !/^#/, <FILE> );
    foreach $line (@lines) {

        chomp($line);
        if ( $line ne $oldline ) {
            $newfile .= "$line\n";

        }
    }
    truncate( FILE, length($newfile) );
    seek( FILE, 0, 0 );
    print FILE "$newfile";
    close(FILE);
}

sub delete_reminder {

    print &ct;
    my ($oldline) = $data{'Oldline'};
    my ( $em, $pw, $sm, $rofs, $rm, $rons, $msg ) = split( /%%/, $oldline );
    if ( $data{'Confirm'} ne "Yes" ) {
        print "$header
	   <form method=POST action=$ENV{'SCRIPT_NAME'}>
	   <input type=hidden name=Email value=\"$data{'Email'}\">
	   <input type=hidden name=Password value=\"$data{'Password'}\">
	   <input type=hidden name=Formaction value=\"Delete\">
	   <input type=hidden name=Oldline value=\"$data{'Oldline'}\">
	   <input type=hidden name=Confirm value=\"Yes\">
	   <center><b>Confirm Deletion</b></center>
	   <br><br>
	   <table border=0>
	   <tr><th colspan=2 align=left>Please confirm that you wish to delete this reminder:</th>
	   </tr>
	   <tr><th align=right>
	   Date:</th><td>" . &get_date($rons) . "</td></tr>
	   <tr><th align=right>
	   Next Reminder to be sent:</th><td>" . &get_date($rofs) . "</td></tr>
	   <tr><th align=right>
	   Sent how often:</th><td>$sm</td></tr>
	   <tr><th align=right>
	   Sent when:</th><td>$rm days in advance</td>
	   </tr>
	   <tr><th colspan=2 align=right>
	   <input type=submit value=\"Yes, Delete this reminder\">
	   </th></tr></table>
           </form>
	   $footer";
        exit();
    }
    else {
        &check_users_file( "$data{'Email'}", "$data{'Password'}" );
        &delete_from_file($oldline);
        &list_reminders( "<center><b>Reminder deleted: </b>Your reminder for "
                         . &get_date($rons)
                         . " has been deleted.</center><br>" );
        exit();

    }

}

sub get_date_as_numbers {

    my @date = ( localtime( $_[0] ) )[ 3, 4, 5 ];
    @date;

}

sub show_main_screen {

    print "$header
         <center>
         <strong>
	 $_[0]
	 <br>$errorlist<br>
	 </strong><br>
<br>
<form method=POST action=$cgi_url>
<table border=0>
<tr><th align=left colspan=2>$reminder_page_text</th></tr>
<tr><td colspan=2><hr>
<font size=\"-1\">(Reminders will be sent to $data{'Email'}. 
<a href=\"$cgi_url?FA=Register\">Or, register a new email address</a>
</font></td></tr>
<input type=hidden name=Email size=15 value=\"$data{'Email'}\">
<input type=hidden name=Password size=15 value=\"$data{'Password'}\">
<tr><th align=left>Send the reminder(s)</th>
<td><select name=Remindme>
<option value=1>1 day before the date
<option value=3>3 days before the date
<option value=7>1 week before the date
<option value=21>3 weeks before the date
<option value=30>1 month before the date
<option value=180>6 months before the date
</select></td></tr>
<tr><th align=left>Remind&nbsp;me&nbsp;about&nbsp;this&nbsp;date</th>
<td><select name=Sendme>
<option>Once Only
<option>Annually
<option>Semi-Annually
<option>Quarterly
<option>Bi-Monthly
<option>Monthly
<option>Bi-Weekly
<option>Weekly
<option>Daily
</select>
<script language=\"JavaScript\">
function kph_popup_message (kph_message) {

 alert(kph_message);
 return false;
}
</script>
<font size=\"-1\"><a href=\"\" onClick=\"return kph_popup_message('Recurring reminders \\(Annually, Daily, etc\\) will continue to be sent forever until you delete them. This is really the most useful for annual holidays or birthdays, for which you will want to be reminded every year, for monthly appointments, or even weekly lunch dates. \\n\\n Daily reminders, on the other hand, tend to be a bit confusing to people, since they expect the reminders to start, say, 3 weeks before the date, remind them every day, and then stop on the date. Thus, when the Daily reminders keep coming after the date has passed, people aren\\'t quite sure what to make of it. Unfortunately, that\\'s not quite how it works.\\n\\n It might be helpful to understand that any given reminder for any date is only sent ONCE. If it is a recurring reminder \\(Daily, Weekly, Annually, etc\\) then the program will update itself to one Day \\(or one Week or one Year\\) after the initial date you chose, and use that new date as the date to remind you of. This will continue indefinitely until you delete the reminder.');\">What's This?</a></font>
</td></tr>
<tr><th align=left>Date to Remember:</th><td><select name=Day>";
    ( $tday, $tmon, $tyear ) = &get_date_as_numbers(time);
    for ( $i = 1; $i <= 31; $i++ ) {
        if ( $i == $tday + 1 ) { $ck = " SELECTED"; }
        else { $ck = ""; }
        print "<option$ck>$i</option>\n";
    }
    print "</select> <select name=Month>\n";
    %mon_by_value = reverse %months;
    foreach $key ( sort { $a <=> $b } ( keys(%mon_by_value) ) ) {
        if ( $key eq $tmon ) {
            $ck = " SELECTED";
        }
        else {
            $ck = "";
        }
        print "<option$ck>$mon_by_value{$key}\n";
    }
    print "</select> <select name=Year>\n";
    $tyear += 1900;
    for ( $i = $tyear; $i < $tyear + 10; $i++ ) {
        if ( $tyear eq $i ) { $ck = " SELECTED"; }
        else { $ck = ""; }
        print "<option$ck>$i</option>\n";
    }

    print "</select></td></tr>
<tr><td colspan=2><hr></td></tr>
<tr><th align=center colspan=2>Please enter a reminder message for 
yourself:</th></tr>
<tr><td align=center colspan=2>
<textarea name=Message cols=40 rows=5>This is a very important date. 
</textarea></td></tr>
<tr><input type=hidden name=Formaction value=Add>
<td colspan=2 align=center><input type=submit value=\"Add Reminder\"></td></tr>
</form>
</table></center>
<hr>
<center>
<form method=POST action=$cgi_url>
<input type=hidden name=Formaction value=List>
   <input type=hidden name=Email size=15 value=\"$data{'Email'}\">
   <input type=hidden name=Password size=15 value=\"$data{'Password'}\">
<input type=submit value=\"List Reminders\">
</form>
   </table></th></tr>
</table>
</center>
<hr>
$footer";
    exit();

}

sub opt_out {

    my $email = $data{'em'};
    if ( $email eq "" ) {
        print "$header
	   <b>Error: no email</b><br><br>
	   Please enter your email address.  This email address will
	   be removed from our list, and placed in our \"opt out\"
	   database so that it cannot be used to sign up for 
	   reminders again.
	   <form method=POST action=$ENV{'SCRIPT_NAME'}>
	   <input type=hidden name=FA value=oi>
	   <input type=text name=em>
	   <input type=submit value=\"Opt Out\">
	   </form>
	   $footer";
        exit();
    }

    $newfile = "";

    # If they have reminders, get rid of 'em.
    open( FILE, "+<$allentries" )
        || &debug(
        "Could not open $allentries (Reminder database) for
	   read/write. System returned: $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug(
            "Could not lock $allentries (Reminder database). The
	   system returned $!" );
    }

    @lines = <FILE>;
    foreach $line (@lines) {
        if ( $line !~ /^$email%%/i ) {
            $newfile .= $line;
        }
    }
    truncate( FILE, length($newfile) );
    seek( FILE, 0, 0 );
    print FILE $newfile;
    close(FILE);
    $newfile = "";

    # If they previously opted in, take them out of there.
    open( FILE, "+<$opt_in_file" )
        || &debug(
        "Could not open $opt_in_file (Opt In file) for
	   read/write. System returned: $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug(
            "Could not lock $opt_in_file (Opt In File). The
	   system returned $!" );
    }
    @lines = <FILE>;
    foreach $line (@lines) {
        if ( $line !~ /^$email\|/i ) {
            $newfile .= $line;
        }
    }
    truncate( FILE, length($newfile) );
    seek( FILE, 0, 0 );
    print FILE $newfile;
    close(FILE);
    $newfile = "";

    # If they are in the users file, remove them.
    open( FILE, "+<$users_file" )
        || &debug(
        "Could not open $users_file (users file) for
	   read/write. System returned: $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug(
            "Could not lock $users_file (users File). The
	   system returned $!" );
    }
    @lines = <FILE>;
    foreach $line (@lines) {
        if ( $line !~ /^$email%%/i ) {
            $newfile .= $line;
        }
    }
    truncate( FILE, length($newfile) );
    seek( FILE, 0, 0 );
    print FILE $newfile;
    close(FILE);
    $newfile = "";

    # If they're in the tmp signup file, get 'em out of there.

    open( FILE, "+<$temp_signup_file" )
        || &debug(
        "Could not open $temp_signup_file (Temp. signup file) for
	   read/write. System returned: $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug(
            "Could not lock $temp_signup_file (Temp. signup file). The
	   system returned $!" );
    }

    @lines = <FILE>;
    foreach $line (@lines) {
        if ( $line !~ /^$email\|/i ) {
            $newfile .= $line;
        }
    }
    truncate( FILE, length($newfile) );
    seek( FILE, 0, 0 );
    print FILE $newfile;
    close(FILE);
    $newfile = "";

    # Put it on the opt-out list
    open( FILE, ">>$opt_out_file" )
        || &debug(
        "Could not open $opt_out_file (opt-out file) for
	   writing. System returned: $!" );
    if ( $opsys ne "win" ) {
        flock( FILE, 2 )
            || &debug("Could not lock $opt_out_file. $!");
    }
    seek( FILE, 0, 2 );
    print FILE "$data{'em'}\n";
    close(FILE);
    print "$header
	 $data{'em'} successfully deleted.  This address has been
	 removed from our reminder database, and
	 added to our \"Off-Limits\" list so that no one may
	 sign up for reminders with this address in the future.  
	 Should you wish 
	 to use the reminder service in the future, please choose the
	 \"Opt In\" button or <a href=\"mailto:$owner_email\">contact
	 the webmaster</a>.
	 $footer";
    exit();
}

sub check_for_opt_out {

    open( FILE, "$opt_out_file" )
        || &debug(
        "Could not open $opt_out_file (opt out file) for reading.
	  The system returned $!" );
    while (<FILE>) {
        if ( $_ =~ /^$email$/i ) {
            print &ct;
            print "$header
	     <strong><center>Error: $email has opted out</center></strong>
	     <br><br>
	     <form method=POST action=$ENV{'SCRIPT_NAME'}>
	     The owner of the email address $email has used the
	     \"opt out\" feature of this service.  This means that
	     this email address may not sign up for reminders.
	      If this is your email address, and you 
	     wish to opt back in,  please click the 
	     <input type=hidden name=Email value=\"$email\">
	     <input type=hidden name=Password value=\"$data{'Password'}\">
	     <input type=hidden name=Password2 value=\"$data{'Password2'}\">
	     <input type=hidden name=Sendme value=\"$data{'Sendme'}\">
	     <input type=hidden name=Remindme value=\"$data{'Remindme'}\">
	     <input type=hidden name=Message value=\"$data{'Message'}\">
	     <input type=hidden name=Day value=\"$data{'Day'}\">
	     <input type=hidden name=Month value=\"$data{'Month'}\">
	     <input type=hidden name=Year value=\"$data{'Year'}\">
	     <input type=hidden name=Send value=\"Token\">
	     <input type=hidden name=FA value=\"oi\">
	     <input type=submit value=\"Opt In\">
	     button.</form>
	     $footer";
            exit();
        }
    }
    if ( $opt_in_preferences eq "opt in" ) {
        if ( &check_opt_in != 1 ) {
            $data{'Send'} = "Token";
            &opt_in("Quiet");
            print &ct;
            print "$header
	      <center><strong>Confirmation Required</strong></center>
	      <br><br>
	      This Reminder service requires a confirmation
	      in order to prevent others from signing you up for
	      reminders without your consent.  You have been
	      sent an email with a special link.  When you receive the
	      email, please click on the link, or copy and paste it into
	      your browser to enable your subscription.  
	      $footer";
            exit();
        }

    }

}

sub opt_in {
    if ( $data{'Send'} eq "Token" ) {
        for ( $i = 0; $i < 50; $i++ ) {
            $rand[$i] = $i;
        }
        $token = crypt( int( rand(@rand) ), time . $$ );
        open( FILE, ">>$temp_signup_file" )
            || &debug("Could not open temporary signup file for writing: $!");
        if ( $opsys ne "win" ) {
            flock( FILE, 2 )
                || &debug(
                "could not lock ($temp_signup_file) temporary signup file. $!"
                );
        }
        my $date = &get_date( time, "long" );
        print FILE "$email|$token|$ENV{'REMOTE_ADDR'}|$date\n";
        close(FILE);

        # Save their reminder to a temporary file so if they opt in,
        # we can set it up. Previously this was terribly confusing to
        # people.
        &convert_date("temp_only");

        $mailmessage = "

Hello.  Someone has requested to \"opt in\" to our Reminder
service using this email address:

 $email

To prevent abuse of the system, we are sending this confirmation
message to you to let you decide if this is what you want.  If 
you wish to use our service, please use this link:

 $cgi_url?FA=oi&tk=$token&em=$email

If you do not wish to sign up, just ignore this message and no 
action will be taken.

To permanently opt out of our reminder service:

 $cgi_url?FA=oo&em=$email

---
$owner_name
$owner_email";

        &send_mail( $email,                "$email",
                    $owner_email,          $owner_name,
                    $owner_email,          $owner_name,
                    "Confirm Opt-In",      $mailmessage,
                    $mail_server_hostname, $this_server_hostname,
                    $opsys
                  );
        print &ct;
        print "$header
	  <strong><center>Opt-In Process Begun</center></strong>
	  <br><br>
	  Thank you for your request to opt in to our Reminder
	  service!  We have sent an email to $email
	  with a special link to confirm that you truly do wish
	  to opt in. When you receive the email, please click on 
	  that link, or copy it and paste it into your browser.
	  At that time, you may sign up for reminders!
	  $footer"    unless $_[0] eq "Quiet";
        exit() unless $_[0] eq "Quiet";

    }
    else {

        # Look for them in the temp signup file to match their token, and
        # take them out if we do find them...
        open( FILE, "+<$temp_signup_file" )
            || &debug("Could not open $temp_signup_file for read/write: $!");
        if ( $opsys ne "win" ) {
            flock( FILE, 2 )
                || &debug("could not lock $temp_signup_file: $!");
        }
        @lines = <FILE>;
        foreach $line (@lines) {
            if ( $line =~ /^$data{'em'}\|$data{'tk'}\|/i ) {
                $foundit = 1;
                $oldline = $line;
            }
            else {
                $newfile .= $line;
            }
        }
        truncate( FILE, length($newfile) );
        seek( FILE, 0, 0 );
        print FILE $newfile;
        close(FILE);
        $newfile = "";

        if ( $foundit == 1 ) {
            open( FILE, "+<$opt_out_file" )
                || &debug("Could not open $opt_out_file for writing: $!");
            if ( $opsys ne "win" ) {
                flock( FILE, 2 )
                    || &debug("Could not lock $opt_out_file: $!");
            }
            @lines = <FILE>;
            foreach $line (@lines) {
                if ( $line !~ /^$data{'em'}$/ ) {
                    $newfile .= $line;
                }
            }
            truncate( FILE, length($newfile) );
            seek( FILE, 0, 0 );
            print FILE $newfile;
            close(FILE);
            $newfile = "";

            # Put them on the opt-in list for proof later...
            open( FILE, ">>$opt_in_file" )
                || &debug("Could not open $opt_in_file for writing: $!");
            if ( $opsys ne "win" ) {
                flock( FILE, 2 )
                    || &debug("Could not lock $opt_in_file: $!");
            }
            seek( FILE, 0, 2 );
            chomp($oldline);
            my $date = &get_date( time, "long" );
            $oldline = "$oldline|$ENV{'REMOTE_ADDR'}|$date\n";
            print FILE $oldline;
            close(FILE);

            # Get their temporary reminder and set that up for real.
            open( TMP, "<$temp_reminders" )
                || &debug(
                        "Could not open temp_reminders file for reading: $!");
            @reminders = grep( /^$data{'em'}%%/, <TMP> );
            close(TMP);
            open( FILE, ">>$allentries" )
                || &debug(
                  "Could not open allentries/reminders file for writing: $!");
            if ( $opsys eq "unix" ) { flock( FILE, 2 ); }
            foreach $reminder (@reminders) {
                print FILE "$reminder";
            }
            close(FILE);
            $errmessage
                = "<b>Welcome! The Opt In process is complete, and you may now sign up for reminders.</b><br>";
            &show_login_screen();
            exit();

        }
        else {

            print "$header<center><strong>Error: Token not found or does not
	       match email address!
	       </strong></center>
	       <br><br>
	       When you signed up, we emailed you a link with
	       a special token.  The link looks something like this:
	       <p>
	       $cgi_url?FA=oi&amp;tk=97ch56XNTyh/A&amp;em=you\@your_email_address
	       <p>
	       Some email programs will not
	       let you click on the link directly, or they may
	       not include the whole link.  If this is the
	       case, please go back to your mail program and 
	       make sure to copy the full link and paste it
	       into your browser.  If you continue to 
	       experience this error, please <a href=mailto:$owner_email>
	       contact the webmaster.</a>
	       $footer";
            exit();

        }
    }

}

sub check_opt_in {

    my ($foundit);

    # check to see if they're on the opt-in list, and
    # if not
    open( FILE, "<$opt_in_file" );
    while (<FILE>) {
        if ( $_ =~ /^$email\|/i ) {
            $foundit = 1;
            last;
        }
    }
    close(FILE);
    $foundit;
}

sub manage {

    print &ct;
    if ( -f "$mail_footer_file" ) {
        open( FILE, "$mail_footer_file" );
        while (<FILE>) { $filefooter .= $_; }
        close(FILE);
    }
    print <<EOF;
$header
<FONT SIZE=4>Welcome to RemindMe Administration!</FONT> 
<table border=0>
<tr><td colspan=2><b>Use this function to change your Administrator Password. 
(The password you use to access this screen.)</b></td></tr>
<tr><td></td><td></td></tr>
	<form method=\"POST\" action=\"$cgi_url\">
	<tr><td><strong>New Password: </strong></td>
	<td><input type=password size=20 name=\"New_password\"></td></tr>
   	<tr><td><strong>Confirm New Password:</strong></td>
	<td><input type=password size=20 name=\"New_password2\"></td></tr>
	<input type=hidden name=Formaction value=Change_password>
	<input type=hidden name=\"Password\" value="$data{'Password'}"><br><br>
	<input type=hidden name=\"Action\" value=\"Changing\">
  	<tr><td colspan=2><input type=submit value=\"Change Password\">
	<input type=reset value="Clear Passwords"></td></tr>
	</form>
</table>
<hr>
<FORM method=POST ACTION="$ENV{'SCRIPT_NAME'}">

<b>Use this area to change the text that is appended to all messages
sent by the RemindMe service.  You can make this just your
organization name and email address, or anything you like.
<br><br>IMPORTANT:
Remember, this is plain text only.  If you enter HTML, it will come out
as plain text.</b>
<br>
<INPUT TYPE="hidden" NAME="Password" value="$data{'Password'}" size=20>
<br>
<B>Enter THE NEW TEXT here --&gt;</B><BR>

<TEXTAREA wrap=hard NAME="Newfooter" ROWS=6 COLS=50>$filefooter</TEXTAREA>
<BR>
<input type=hidden name=Formaction value="Edit_mail_footer">
<INPUT TYPE="Submit" VALUE="Change text NOW">
<INPUT TYPE="Reset" value="Reset This Text Area">
</form>
<hr>
$footer
EOF
}

sub admin_login {
    print &ct;
    print "$header
        <form method=POST action=$ENV{'SCRIPT_NAME'}>
        <b>Please enter your password for RemindMe
Administration:</b>
        <input type=password name=Password value=\"$data{'Password'}\">
        <input type=hidden name=FA value=\"Admin Menu\">
        <input type=submit value=\"Log in\">
        </form>
        $footer";
    exit();
}

# &check_users_file($email,$pw);
sub check_users_file {
    my ( $email, $pw ) = @_;
    my ($test);
    open( USR, "<$users_file" ) || &debug("Could not open users file: $!");
    $test = ( grep( /^$email%%/, <USR> ) )[0];
    close(USR);
    if ( $test eq "" ) {

        # Add them
        open( USR, ">>$users_file" )
            || &debug("Could not open users file: $!");
        print USR "$email%%$pw\n";
        close(USR);
    }

}

sub show_register_screen {

    my ( $mon, $mday, $year );
    my $regdate = &get_date( time + ( 86400 * 2 ), 'long' );
    $regdate =~ /^(\d+?)\/(\d+?)\/(\d+?)\s+.*$/;
    $mon  = $1;
    $mday = $2;
    $year = $3;
    $mday *= 1;
    $mon  *= 1;
    %mon_by_val = reverse %months;
    $mon        = $mon_by_val{ $mon - 1 };
    $confirm_reminder_message =~ s/</&lt;/g;
    $confirm_reminder_message =~ s/>/&gt;/g;
    $confirm_reminder_message =~ s/\"/&quot;/g;

    print <<EOF;
$header
$errmessage
<br><br>
<b>Welcome to the $owner_name email reminder system.</b><br>
To begin setting up automatic
email reminders for yourself, you must first register. Please enter the
information requested below, and you'll be ready to set up reminders in
a flash!
<form method=POST action=$cgi_url>
<table border=1><tr><td>
<table border=0>
<tr><td colspan=2></td></tr>
<tr><th align=left>Your email address:</th>
<td><input type=text name=Email size=15 value=\"$data{'Email'}\"></td></tr>
<tr><th align=left>Choose a Password:</th>
<td><input type=password name=Password size=15></td></tr>
<tr><th align=left>Type your password again:</th>
<td><input type=password name=Password2 size=15></td></tr>
<tr><td colspan=2></td></tr>
<tr><input type=hidden name=Formaction value=Add>
<input type=hidden name="Day" value="$mday">
<input type=hidden name="Month" value="$mon">
<input type=hidden name="Year" value="$year">
<input type=hidden name="Remindme" value="1">
<input type=hidden name="Sendme" value="Once Only">
<input type=hidden name="Message" value="$confirm_reminder_message">
<td></td><td><input type=submit value=\"Sign up!\"></td></tr>
</form></table></td></tr></table>
<font size=\"-1\"><a href=\"$cgi_url?FA=Login\">Already have an account? Login!</a></font>
<br>
$footer

EOF

    exit();
}

sub show_login_screen {

    # Use the email from opt in if they've just opted in.
    if ( !$data{'Email'} && $data{'em'} ) { $data{'Email'} = $data{'em'}; }
    print "$header
	$errmessage
	<b>Login to set up reminders, or check any reminders you may
	have pending.</b><br><br>
	<form method=POST action=$cgi_url>
        <table border=1><tr><td>
	<table border=0>
 	<tr><td><b>Email address</b></td>
	<td><input type=text name=\"Email\" value=\"$data{'Email'}\" size=25></td>
        </tr>
 	<tr><td><b>Password</b></td>
	<td><input type=password name=\"Password\" value=\"$data{'Password'}\"  size=25></td>
 	</tr>
	<tr><td>&nbsp;</td><td><input type=submit value=\"Login\"></td></tr>
	</table>
	<input type=hidden name=Formaction value=\"List\">
	</form></td></tr></table>
	<font size=\"-1\"><a href=\"$cgi_url?FA=Register\">Not signed up yet? Register!</a></font>
	<br>
	$footer";
    exit();
}
